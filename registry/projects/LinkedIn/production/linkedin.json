{
    "title": "LinkedIn",
    "version": "v1",
    "baseUri": "https://api.linkedin.com/{version}",
    "baseUriParameters": {
        "version": {
            "name": "version",
            "displayName": "version",
            "type": "string",
            "required": true,
            "repeat": false,
            "enum": [
                "v1"
            ],
            "__METADATA__": {
                "calculated": true,
                "primitiveValuesMeta": {
                    "displayName": {
                        "calculated": true
                    },
                    "type": {
                        "insertedAsDefault": true
                    },
                    "required": {
                        "insertedAsDefault": true
                    },
                    "repeat": {
                        "insertedAsDefault": true
                    },
                    "enum": {
                        "calculated": true
                    }
                }
            }
        }
    },
    "protocols": [
        "HTTPS"
    ],
    "schemas": [
        {
            "error-schema": "{\n    \"type\":\"object\",\n    \"$schema\": \"http://json-schema.org/draft-03/schema\",\n    \"id\": \"http://jsonschema.net\",\n    \"required\":false,\n    \"properties\":{\n        \"errorCode\": {\n            \"type\":\"number\",\n            \"id\": \"http://jsonschema.net/errorCode\",\n            \"required\":false\n        },\n        \"message\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/message\",\n            \"required\":false\n        },\n        \"requestId\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/requestId\",\n            \"required\":false\n        },\n        \"status\": {\n            \"type\":\"number\",\n            \"id\": \"http://jsonschema.net/status\",\n            \"required\":false\n        },\n        \"timestamp\": {\n            \"type\":\"number\",\n            \"id\": \"http://jsonschema.net/timestamp\",\n            \"required\":false\n        }\n    }\n}"
        },
        {
            "error-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"error\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:short\" name=\"status\"/>\n        <xs:element type=\"xs:long\" name=\"timestamp\"/>\n        <xs:element type=\"xs:string\" name=\"request-id\"/>\n        <xs:element type=\"xs:byte\" name=\"error-code\"/>\n        <xs:element type=\"xs:string\" name=\"message\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "people-gm-group-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"group-membership\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:string\" name=\"show-group-logo-in-profile\"/>\n        <xs:element name=\"email-digest-frequency\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"email-announcements-from-managers\"/>\n        <xs:element type=\"xs:string\" name=\"allow-messages-from-members\"/>\n        <xs:element type=\"xs:string\" name=\"email-for-every-new-post\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "jobSuggestions-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"job-suggestions\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"jobs\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"job\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:int\" name=\"id\"/>\n                    <xs:element name=\"company\">\n                      <xs:complexType mixed=\"true\">\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"id\" minOccurs=\"0\"/>\n                          <xs:element type=\"xs:string\" name=\"name\" minOccurs=\"0\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element type=\"xs:string\" name=\"salary\" minOccurs=\"0\"/>\n                    <xs:element name=\"job-poster\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"id\"/>\n                          <xs:element type=\"xs:string\" name=\"first-name\"/>\n                          <xs:element type=\"xs:string\" name=\"last-name\"/>\n                          <xs:element type=\"xs:string\" name=\"headline\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element type=\"xs:string\" name=\"description-snippet\"/>\n                    <xs:element type=\"xs:string\" name=\"location-description\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\n            <xs:attribute type=\"xs:byte\" name=\"count\"/>\n            <xs:attribute type=\"xs:byte\" name=\"start\"/>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "group-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"group\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:int\" name=\"id\"/>\n        <xs:element type=\"xs:string\" name=\"name\"/>\n        <xs:element type=\"xs:string\" name=\"short-description\"/>\n        <xs:element type=\"xs:string\" name=\"description\"/>\n        <xs:element name=\"relation-to-viewer\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"membership-state\"/>\n              <xs:element type=\"xs:string\" name=\"available-actions\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"posts\"/>\n        <xs:element type=\"xs:byte\" name=\"counts-by-category\"/>\n        <xs:element type=\"xs:string\" name=\"is-open-to-non-members\"/>\n        <xs:element type=\"xs:string\" name=\"category\"/>\n        <xs:element type=\"xs:anyURI\" name=\"website-url\"/>\n        <xs:element type=\"xs:string\" name=\"locale\"/>\n        <xs:element name=\"location\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n              <xs:element name=\"country\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:short\" name=\"postal-code\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"allow-member-invites\"/>\n        <xs:element type=\"xs:anyURI\" name=\"site-group-url\"/>\n        <xs:element type=\"xs:anyURI\" name=\"small-logo-url\"/>\n        <xs:element type=\"xs:anyURI\" name=\"large-logo-url\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "post-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"post\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:string\" name=\"id\"/>\n        <xs:element name=\"parent-group\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:int\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"type\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"creator\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"first-name\"/>\n              <xs:element type=\"xs:string\" name=\"last-name\"/>\n              <xs:element type=\"xs:string\" name=\"headline\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"title\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "company-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:int\" name=\"id\"/>\r\n        <xs:element type=\"xs:string\" name=\"name\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "companies-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"companies\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"company\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:float\" name=\"id\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:string\" name=\"key\" use=\"optional\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "update-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"update\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:long\" name=\"timestamp\"/>\r\n        <xs:element type=\"xs:string\" name=\"update-type\"/>\r\n        <xs:element name=\"update-content\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"company\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:short\" name=\"id\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element name=\"company-person-update\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"person\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:int\" name=\"id\"/>\r\n                          <xs:element type=\"xs:string\" name=\"first-name\"/>\r\n                          <xs:element type=\"xs:string\" name=\"last-name\"/>\r\n                          <xs:element type=\"xs:string\" name=\"headline\"/>\r\n                          <xs:element type=\"xs:anyURI\" name=\"picture-url\"/>\r\n                          <xs:element name=\"api-standard-profile-request\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                                <xs:element name=\"headers\">\r\n                                  <xs:complexType>\r\n                                    <xs:sequence>\r\n                                      <xs:element name=\"http-header\">\r\n                                        <xs:complexType>\r\n                                          <xs:sequence>\r\n                                            <xs:element type=\"xs:string\" name=\"name\"/>\r\n                                            <xs:element type=\"xs:string\" name=\"value\"/>\r\n                                          </xs:sequence>\r\n                                        </xs:complexType>\r\n                                      </xs:element>\r\n                                    </xs:sequence>\r\n                                    <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                                  </xs:complexType>\r\n                                </xs:element>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                          <xs:element name=\"site-standard-profile-request\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element name=\"action\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"code\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element name=\"old-position\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"title\"/>\r\n                          <xs:element name=\"company\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:string\" name=\"name\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element name=\"new-position\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"title\"/>\r\n                          <xs:element name=\"company\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:short\" name=\"id\"/>\r\n                                <xs:element type=\"xs:string\" name=\"name\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "update-comment-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"update-comment\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"comment\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "is-liked-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"is-liked\" type=\"xs:string\"/>\r\n</xs:schema>"
        },
        {
            "updates-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"network\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"updates\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"update\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:long\" name=\"timestamp\"/>\r\n                    <xs:element type=\"xs:string\" name=\"update-key\"/>\r\n                    <xs:element type=\"xs:string\" name=\"update-type\"/>\r\n                    <xs:element name=\"update-content\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"person\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:string\" name=\"id\"/>\r\n                                <xs:element type=\"xs:string\" name=\"first-name\"/>\r\n                                <xs:element type=\"xs:string\" name=\"last-name\"/>\r\n                                <xs:element type=\"xs:string\" name=\"headline\"/>\r\n                                <xs:element type=\"xs:string\" name=\"current-status\"/>\r\n                                <xs:element name=\"api-standard-profile-request\">\r\n                                  <xs:complexType>\r\n                                    <xs:sequence>\r\n                                      <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                                      <xs:element name=\"headers\">\r\n                                        <xs:complexType>\r\n                                          <xs:sequence>\r\n                                            <xs:element name=\"http-header\">\r\n                                              <xs:complexType>\r\n                                                <xs:sequence>\r\n                                                  <xs:element type=\"xs:string\" name=\"name\"/>\r\n                                                  <xs:element type=\"xs:string\" name=\"value\"/>\r\n                                                </xs:sequence>\r\n                                              </xs:complexType>\r\n                                            </xs:element>\r\n                                          </xs:sequence>\r\n                                          <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                                        </xs:complexType>\r\n                                      </xs:element>\r\n                                    </xs:sequence>\r\n                                  </xs:complexType>\r\n                                </xs:element>\r\n                                <xs:element name=\"site-standard-profile-request\">\r\n                                  <xs:complexType>\r\n                                    <xs:sequence>\r\n                                      <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                                    </xs:sequence>\r\n                                  </xs:complexType>\r\n                                </xs:element>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element type=\"xs:string\" name=\"is-commentable\"/>\r\n                    <xs:element name=\"update-comments\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"update-comment\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:int\" name=\"id\"/>\r\n                                <xs:element type=\"xs:byte\" name=\"sequence-number\"/>\r\n                                <xs:element type=\"xs:long\" name=\"timestamp\"/>\r\n                                <xs:element type=\"xs:string\" name=\"comment\"/>\r\n                                <xs:element name=\"person\">\r\n                                  <xs:complexType>\r\n                                    <xs:sequence>\r\n                                      <xs:element type=\"xs:string\" name=\"id\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"first-name\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"last-name\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"headline\"/>\r\n                                      <xs:element name=\"api-standard-profile-request\">\r\n                                        <xs:complexType>\r\n                                          <xs:sequence>\r\n                                            <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                                            <xs:element name=\"headers\">\r\n                                              <xs:complexType>\r\n                                                <xs:sequence>\r\n                                                  <xs:element name=\"http-header\">\r\n                                                    <xs:complexType>\r\n                                                      <xs:sequence>\r\n                                                        <xs:element type=\"xs:string\" name=\"name\"/>\r\n                                                        <xs:element type=\"xs:string\" name=\"value\"/>\r\n                                                      </xs:sequence>\r\n                                                    </xs:complexType>\r\n                                                  </xs:element>\r\n                                                </xs:sequence>\r\n                                                <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                                              </xs:complexType>\r\n                                            </xs:element>\r\n                                          </xs:sequence>\r\n                                        </xs:complexType>\r\n                                      </xs:element>\r\n                                      <xs:element name=\"site-standard-profile-request\">\r\n                                        <xs:complexType>\r\n                                          <xs:sequence>\r\n                                            <xs:element type=\"xs:anyURI\" name=\"url\"/>\r\n                                          </xs:sequence>\r\n                                        </xs:complexType>\r\n                                      </xs:element>\r\n                                    </xs:sequence>\r\n                                  </xs:complexType>\r\n                                </xs:element>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                        <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element type=\"xs:string\" name=\"is-likable\"/>\r\n                    <xs:element type=\"xs:string\" name=\"is-liked\"/>\r\n                    <xs:element type=\"xs:byte\" name=\"num-likes\"/>\r\n                    <xs:element name=\"likes\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"like\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element name=\"person\">\r\n                                  <xs:complexType>\r\n                                    <xs:sequence>\r\n                                      <xs:element type=\"xs:string\" name=\"id\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"first-name\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"last-name\"/>\r\n                                      <xs:element type=\"xs:string\" name=\"headline\"/>\r\n                                    </xs:sequence>\r\n                                  </xs:complexType>\r\n                                </xs:element>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                        <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "activity-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"activity\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"content-type\"/>\r\n        <xs:element type=\"xs:string\" name=\"body\"/>\r\n      </xs:sequence>\r\n      <xs:attribute type=\"xs:string\" name=\"locale\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "comment-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"comment\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"text\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "comments-xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xsd:element name=\"comments\">\r\n    <xsd:complexType>\r\n      <xsd:sequence>\r\n        <xsd:element name=\"comment\" minOccurs=\"0\" maxOccurs=\"1\">\r\n          <xsd:complexType>\r\n            <xsd:sequence>\r\n              <xsd:element name=\"id\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n              <xsd:element name=\"text\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:string\"/>\r\n              <xsd:element name=\"creator\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                <xsd:complexType>\r\n                  <xsd:sequence>\r\n                    <xsd:element name=\"id\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                    <xsd:element name=\"first-name\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                    <xsd:element name=\"last-name\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                    <xsd:element name=\"headline\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                  </xsd:sequence>\r\n                </xsd:complexType>\r\n              </xsd:element>\r\n              <xsd:element name=\"creation-timestamp\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:int\"/>\r\n              <xsd:element name=\"relation-to-viewer\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                <xsd:complexType>\r\n                  <xsd:sequence>\r\n                    <xsd:element name=\"available-actions\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                      <xsd:complexType>\r\n                        <xsd:sequence>\r\n                          <xsd:element name=\"action\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                            <xsd:complexType>\r\n                              <xsd:sequence>\r\n                                <xsd:element name=\"code\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                              </xsd:sequence>\r\n                            </xsd:complexType>\r\n                          </xsd:element>\r\n                        </xsd:sequence>\r\n                        <xsd:attribute name=\"total\" type=\"xsd:int\" use=\"required\"/>\r\n                      </xsd:complexType>\r\n                    </xsd:element>\r\n                  </xsd:sequence>\r\n                </xsd:complexType>\r\n              </xsd:element>\r\n            </xsd:sequence>\r\n          </xsd:complexType>\r\n        </xsd:element>\r\n      </xsd:sequence>\r\n      <xsd:attribute name=\"total\" type=\"xsd:int\" use=\"required\"/>\r\n    </xsd:complexType>\r\n  </xsd:element>\r\n</xsd:schema>\r\n"
        },
        {
            "company-about-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:short\" name=\"id\"/>\r\n        <xs:element type=\"xs:string\" name=\"universal-name\"/>\r\n        <xs:element type=\"xs:string\" name=\"name\"/>\r\n        <xs:element type=\"xs:string\" name=\"ticker\"/>\r\n        <xs:element type=\"xs:anyURI\" name=\"logo-url\"/>\r\n        <xs:element type=\"xs:string\" name=\"description\"/>\r\n        <xs:element name=\"company-type\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"industries\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"industry\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:byte\" name=\"code\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:string\" name=\"size\"/>\r\n        <xs:element name=\"specialties\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"specialty\" maxOccurs=\"unbounded\" minOccurs=\"0\"/>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:anyURI\" name=\"blog-rss-url\"/>\r\n        <xs:element type=\"xs:string\" name=\"twitter-id\"/>\r\n        <xs:element type=\"xs:anyURI\" name=\"square-logo-url\"/>\r\n        <xs:element name=\"locations\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"location\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"address\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"street1\"/>\r\n                          <xs:element type=\"xs:string\" name=\"city\"/>\r\n                          <xs:element type=\"xs:int\" name=\"postal-code\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element name=\"contact-info\">\r\n                      <xs:complexType mixed=\"true\">\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"phone1\" minOccurs=\"0\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:short\" name=\"founded-year\"/>\r\n        <xs:element name=\"email-domains\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"email-domain\"/>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:anyURI\" name=\"website-url\"/>\r\n        <xs:element name=\"status\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"employee-count-range\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "folowing-company-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:short\" name=\"id\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "products-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"products\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"product\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:short\" name=\"id\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n              <xs:element name=\"type\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:string\" name=\"code\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element type=\"xs:byte\" name=\"num-recommendations\"/>\r\n              <xs:element name=\"recommendations\" minOccurs=\"0\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"recommendation\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"recommender\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:string\" name=\"id\"/>\r\n                                <xs:element type=\"xs:string\" name=\"first-name\"/>\r\n                                <xs:element type=\"xs:string\" name=\"last-name\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                          <xs:element type=\"xs:int\" name=\"id\"/>\r\n                          <xs:element type=\"xs:short\" name=\"product-id\"/>\r\n                          <xs:element type=\"xs:long\" name=\"timestamp\"/>\r\n                          <xs:element type=\"xs:string\" name=\"text\" minOccurs=\"0\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                  <xs:attribute type=\"xs:byte\" name=\"count\" use=\"optional\"/>\r\n                  <xs:attribute type=\"xs:byte\" name=\"start\" use=\"optional\"/>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element name=\"product-category\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:string\" name=\"code\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element type=\"xs:anyURI\" name=\"website-url\"/>\r\n              <xs:element type=\"xs:string\" name=\"disclaimer\" minOccurs=\"0\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n      <xs:attribute type=\"xs:byte\" name=\"count\"/>\r\n      <xs:attribute type=\"xs:byte\" name=\"start\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "people-share-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"share\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"comment\"/>\r\n        <xs:element name=\"content\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"title\"/>\r\n              <xs:element type=\"xs:string\" name=\"description\"/>\r\n              <xs:element type=\"xs:string\" name=\"submitted-url\"/>\r\n              <xs:element type=\"xs:anyURI\" name=\"submitted-image-url\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"visibility\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>\r\n"
        },
        {
            "currentUser-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"person\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:int\" name=\"id\"/>\n        <xs:element type=\"xs:string\" name=\"first-name\"/>\n        <xs:element type=\"xs:string\" name=\"last-name\"/>\n        <xs:element type=\"xs:string\" name=\"headline\"/>\n        <xs:element name=\"location\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n              <xs:element name=\"country\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:short\" name=\"code\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"industry\"/>\n        <xs:element type=\"xs:byte\" name=\"distance\"/>\n        <xs:element name=\"relation-to-viewer\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:byte\" name=\"distance\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:byte\" name=\"num-recommenders\"/>\n        <xs:element type=\"xs:string\" name=\"current-status\"/>\n        <xs:element type=\"xs:long\" name=\"current-status-timestamp\"/>\n        <xs:element name=\"connections\">\n          <xs:complexType>\n            <xs:simpleContent>\n              <xs:extension base=\"xs:string\">\n                <xs:attribute type=\"xs:byte\" name=\"total\"/>\n              </xs:extension>\n            </xs:simpleContent>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"summary\"/>\n        <xs:element name=\"positions\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"position\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"title\"/>\n                    <xs:element type=\"xs:string\" name=\"summary\"/>\n                    <xs:element name=\"start-date\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"year\"/>\n                          <xs:element type=\"xs:string\" name=\"month\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element type=\"xs:string\" name=\"is-current\"/>\n                    <xs:element name=\"company\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"name\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"educations\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"education\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"school-name\"/>\n                    <xs:element type=\"xs:string\" name=\"degree\"/>\n                    <xs:element name=\"start-date\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"year\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element name=\"end-date\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"year\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"member-url-resources\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"member-url\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:anyURI\" name=\"url\"/>\n                    <xs:element type=\"xs:string\" name=\"name\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"api-standard-profile-request\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:anyURI\" name=\"url\"/>\n              <xs:element name=\"headers\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element name=\"http-header\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"name\"/>\n                          <xs:element type=\"xs:string\" name=\"value\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"site-standard-profile-request\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:anyURI\" name=\"url\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:anyURI\" name=\"picture-url\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "currentUser": "{\n    \"type\":\"object\",\n    \"$schema\": \"http://json-schema.org/draft-03/schema\",\n    \"id\": \"http://jsonschema.net\",\n    \"required\":false,\n    \"properties\":{\n        \"firstName\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/firstName\",\n            \"required\":false\n        },\n        \"headline\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/headline\",\n            \"required\":false\n        },\n        \"lastName\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/lastName\",\n            \"required\":false\n        },\n        \"siteStandardProfileRequest\": {\n            \"type\":\"object\",\n            \"id\": \"http://jsonschema.net/siteStandardProfileRequest\",\n            \"required\":false,\n            \"properties\":{\n                \"url\": {\n                    \"type\":\"string\",\n                    \"id\": \"http://jsonschema.net/siteStandardProfileRequest/url\",\n                    \"required\":false\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "connections-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"connections\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"person\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"first-name\"/>\n              <xs:element type=\"xs:string\" name=\"last-name\"/>\n              <xs:element type=\"xs:string\" name=\"headline\"/>\n              <xs:element name=\"location\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"name\"/>\n                    <xs:element name=\"country\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"code\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element type=\"xs:string\" name=\"industry\"/>\n              <xs:element name=\"api-standard-profile-request\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:anyURI\" name=\"url\"/>\n                    <xs:element name=\"headers\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element name=\"http-header\">\n                            <xs:complexType>\n                              <xs:sequence>\n                                <xs:element type=\"xs:string\" name=\"name\"/>\n                                <xs:element type=\"xs:string\" name=\"value\"/>\n                              </xs:sequence>\n                            </xs:complexType>\n                          </xs:element>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"site-standard-profile-request\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:anyURI\" name=\"url\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element type=\"xs:anyURI\" name=\"picture-url\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n      <xs:attribute type=\"xs:short\" name=\"total\"/>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "person-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"person\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:int\" name=\"id\"/>\n        <xs:element type=\"xs:string\" name=\"first-name\"/>\n        <xs:element type=\"xs:string\" name=\"last-name\"/>\n        <xs:element type=\"xs:string\" name=\"headline\"/>\n        <xs:element name=\"location\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n              <xs:element name=\"country\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:short\" name=\"code\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"industry\"/>\n        <xs:element type=\"xs:byte\" name=\"distance\"/>\n        <xs:element type=\"xs:byte\" name=\"num-recommenders\"/>\n        <xs:element type=\"xs:string\" name=\"current-status\"/>\n        <xs:element type=\"xs:long\" name=\"current-status-timestamp\"/>\n        <xs:element name=\"connections\">\n          <xs:complexType>\n            <xs:simpleContent>\n              <xs:extension base=\"xs:string\">\n                <xs:attribute type=\"xs:byte\" name=\"total\"/>\n              </xs:extension>\n            </xs:simpleContent>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"summary\"/>\n        <xs:element name=\"positions\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"position\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"title\"/>\n                    <xs:element type=\"xs:string\" name=\"summary\"/>\n                    <xs:element name=\"start-date\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"year\"/>\n                          <xs:element type=\"xs:string\" name=\"month\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element type=\"xs:string\" name=\"is-current\"/>\n                    <xs:element name=\"company\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"name\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"member-url-resources\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"member-url\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:anyURI\" name=\"url\"/>\n                    <xs:element type=\"xs:string\" name=\"name\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"api-standard-profile-request\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:anyURI\" name=\"url\"/>\n              <xs:element name=\"headers\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element name=\"http-header\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"name\"/>\n                          <xs:element type=\"xs:string\" name=\"value\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"site-standard-profile-request\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:anyURI\" name=\"url\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:anyURI\" name=\"picture-url\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "people": "{\n    \"type\":\"object\",\n    \"$schema\": \"http://json-schema.org/draft-03/schema\",\n    \"id\": \"http://jsonschema.net\",\n    \"required\":false,\n    \"properties\":{\n        \"firstName\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/firstName\",\n            \"required\":false\n        },\n        \"headline\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/headline\",\n            \"required\":false\n        },\n        \"lastName\": {\n            \"type\":\"string\",\n            \"id\": \"http://jsonschema.net/lastName\",\n            \"required\":false\n        },\n        \"siteStandardProfileRequest\": {\n            \"type\":\"object\",\n            \"id\": \"http://jsonschema.net/siteStandardProfileRequest\",\n            \"required\":false,\n            \"properties\":{\n                \"url\": {\n                    \"type\":\"string\",\n                    \"id\": \"http://jsonschema.net/siteStandardProfileRequest/url\",\n                    \"required\":false\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "followedCompanies-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"companies\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"company\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:int\" name=\"id\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "mailboxItem-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"mailbox-item\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"recipients\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"recipient\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"person\">\r\n                      <xs:complexType>\r\n                        <xs:simpleContent>\r\n                          <xs:extension base=\"xs:string\">\r\n                            <xs:attribute type=\"xs:string\" name=\"path\" use=\"optional\"/>\r\n                          </xs:extension>\r\n                        </xs:simpleContent>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:string\" name=\"subject\"/>\r\n        <xs:element type=\"xs:string\" name=\"body\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "personShare-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"update\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"update-key\"/>\r\n        <xs:element type=\"xs:anyURI\" name=\"update-url\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "networkStats-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"network-stats\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"property\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n          <xs:complexType>\r\n            <xs:simpleContent>\r\n              <xs:extension base=\"xs:short\">\r\n                <xs:attribute type=\"xs:string\" name=\"key\" use=\"optional\"/>\r\n              </xs:extension>\r\n            </xs:simpleContent>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "jobBookmarks-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"job-bookmarks\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"job-bookmark\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"is-applied\"/>\n              <xs:element type=\"xs:string\" name=\"is-saved\"/>\n              <xs:element type=\"xs:long\" name=\"saved-timestamp\"/>\n              <xs:element name=\"job\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:int\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"active\"/>\n                    <xs:element name=\"company\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:int\" name=\"id\"/>\n                          <xs:element type=\"xs:string\" name=\"name\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element name=\"position\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"title\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element type=\"xs:string\" name=\"description-snippet\"/>\n                    <xs:element type=\"xs:long\" name=\"posting-timestamp\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "jobBookmark-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"job-bookmark\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"job\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"id\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "posts-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"posts\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"post\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"id\"/>\n              <xs:element name=\"type\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"code\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"creator\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"first-name\"/>\n                    <xs:element type=\"xs:string\" name=\"last-name\"/>\n                    <xs:element type=\"xs:string\" name=\"headline\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element type=\"xs:string\" name=\"title\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n      <xs:attribute type=\"xs:byte\" name=\"total\"/>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "groupMembership-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"group-membership\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"group\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:int\" name=\"id\"/>\n              <xs:sequence minOccurs=\"0\">\n              <xs:element type=\"xs:string\" name=\"name\"/>\n              </xs:sequence>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"show-group-logo-in-profile\"/>\n        <xs:element name=\"email-digest-frequency\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"email-announcements-from-managers\"/>\n        <xs:element type=\"xs:string\" name=\"allow-messages-from-members\"/>\n        <xs:element type=\"xs:string\" name=\"email-for-every-new-post\"/>\n        <xs:element name=\"membership-state\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "peopleSearch-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"people-search\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"people\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"person\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"id\"/>\n                    <xs:element type=\"xs:string\" name=\"first-name\"/>\n                    <xs:element type=\"xs:string\" name=\"last-name\"/>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:integer\" name=\"total\"/>\n            <xs:attribute type=\"xs:integer\" name=\"count\"/>\n            <xs:attribute type=\"xs:integer\" name=\"start\"/>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:integer\" name=\"num-results\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "companySearch-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company-search\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"companies\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"company\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:int\" name=\"id\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                    <xs:element type=\"xs:anyURI\" name=\"logo-url\"/>\r\n                    <xs:element type=\"xs:string\" name=\"type\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:short\" name=\"total\"/>\r\n            <xs:attribute type=\"xs:byte\" name=\"count\"/>\r\n            <xs:attribute type=\"xs:byte\" name=\"start\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:short\" name=\"num-results\"/>\r\n        <xs:element name=\"facets\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"facet\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:string\" name=\"code\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                    <xs:element name=\"buckets\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"bucket\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:string\" name=\"code\"/>\r\n                                <xs:element type=\"xs:string\" name=\"name\"/>\r\n                                <xs:element type=\"xs:short\" name=\"count\"/>\r\n                                <xs:element type=\"xs:string\" name=\"selected\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                        <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "companyShare-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"share\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"visibility\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:string\" name=\"comment\"/>\r\n        <xs:element name=\"content\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:anyURI\" name=\"submitted-url\"/>\r\n              <xs:element type=\"xs:string\" name=\"title\"/>\r\n              <xs:element type=\"xs:string\" name=\"description\"/>\r\n              <xs:element type=\"xs:anyURI\" name=\"submitted-image-url\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"share-target-reach\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"share-targets\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"share-target\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"code\"/>\r\n                          <xs:element name=\"tvalues\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:string\" name=\"tvalue\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "companyShare": "{\r\n  \"required\" : true ,\r\n  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,\r\n  \"type\" : \"object\" ,\r\n  \"properties\" : {\r\n    \"visibility\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"code\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    } ,\r\n    \"comment\" : {\r\n      \"type\" : \"string\" ,\r\n      \"required\" : false\r\n    } ,\r\n    \"content\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"submitted-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"title\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"description\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"submitted‐image-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
        },
        {
            "companyStatistics-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company-statistics\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"status-update-statistics\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"views-by-month\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"view-by-month\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element name=\"date\">\r\n                            <xs:complexType>\r\n                              <xs:sequence>\r\n                                <xs:element type=\"xs:short\" name=\"year\"/>\r\n                                <xs:element type=\"xs:byte\" name=\"month\"/>\r\n                              </xs:sequence>\r\n                            </xs:complexType>\r\n                          </xs:element>\r\n                          <xs:element type=\"xs:byte\" name=\"clicks\" minOccurs=\"0\"/>\r\n                          <xs:element type=\"xs:byte\" name=\"likes\" minOccurs=\"0\"/>\r\n                          <xs:element type=\"xs:byte\" name=\"comments\" minOccurs=\"0\"/>\r\n                          <xs:element type=\"xs:byte\" name=\"shares\" minOccurs=\"0\"/>\r\n                          <xs:element type=\"xs:short\" name=\"impressions\" minOccurs=\"0\"/>\r\n                          <xs:element type=\"xs:float\" name=\"engagement\" minOccurs=\"0\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                  <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"follow-statistics\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:byte\" name=\"count\"/>\r\n              <xs:element type=\"xs:byte\" name=\"employee-count\"/>\r\n              <xs:element type=\"xs:byte\" name=\"non-employee-count\"/>\r\n              <xs:element name=\"seniorities\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"seniority\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:byte\" name=\"entry-key\"/>\r\n                          <xs:element type=\"xs:byte\" name=\"entry-value\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                  <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "groupPost-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"post\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"title\"/>\r\n        <xs:element type=\"xs:string\" name=\"summary\"/>\r\n        <xs:element name=\"content\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:anyURI\" name=\"submitted-url\"/>\r\n              <xs:element type=\"xs:string\" name=\"submitted-image-url\"/>\r\n              <xs:element type=\"xs:string\" name=\"title\"/>\r\n              <xs:element type=\"xs:string\" name=\"description\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "groupPosts-xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xsd:element name=\"posts\">\r\n    <xsd:complexType>\r\n      <xsd:sequence>\r\n        <xsd:element name=\"post\" minOccurs=\"0\" maxOccurs=\"1\">\r\n          <xsd:complexType>\r\n            <xsd:sequence>\r\n              <xsd:element name=\"id\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n              <xsd:element name=\"type\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                <xsd:complexType>\r\n                  <xsd:sequence>\r\n                    <xsd:element name=\"code\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                  </xsd:sequence>\r\n                </xsd:complexType>\r\n              </xsd:element>\r\n              <xsd:element name=\"creator\" minOccurs=\"0\" maxOccurs=\"1\">\r\n                <xsd:complexType>\r\n                  <xsd:sequence>\r\n                    <xsd:element name=\"id\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                    <xsd:element name=\"first-name\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:string\"/>\r\n                    <xsd:element name=\"last-name\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:string\"/>\r\n                    <xsd:element name=\"headline\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:normalizedString\"/>\r\n                  </xsd:sequence>\r\n                </xsd:complexType>\r\n              </xsd:element>\r\n              <xsd:element name=\"title\" minOccurs=\"0\" maxOccurs=\"1\" type=\"xsd:string\"/>\r\n            </xsd:sequence>\r\n          </xsd:complexType>\r\n        </xsd:element>\r\n      </xsd:sequence>\r\n      <xsd:attribute name=\"total\" type=\"xsd:int\" use=\"required\"/>\r\n    </xsd:complexType>\r\n  </xsd:element>\r\n</xsd:schema>\r\n"
        },
        {
            "jobSearch-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"job-search\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"jobs\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"job\" maxOccurs=\"unbounded\" minOccurs=\"0\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:int\" name=\"id\"/>\n                    <xs:element name=\"position\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element name=\"location\">\n                            <xs:complexType>\n                              <xs:sequence>\n                                <xs:element type=\"xs:string\" name=\"name\"/>\n                                <xs:element name=\"country\">\n                                  <xs:complexType>\n                                    <xs:sequence>\n                                      <xs:element type=\"xs:string\" name=\"code\"/>\n                                    </xs:sequence>\n                                  </xs:complexType>\n                                </xs:element>\n                              </xs:sequence>\n                            </xs:complexType>\n                          </xs:element>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element name=\"job-poster\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"first-name\"/>\n                          <xs:element type=\"xs:string\" name=\"last-name\"/>\n                          <xs:element name=\"relation-to-viewer\">\n                            <xs:complexType>\n                              <xs:sequence>\n                                <xs:element type=\"xs:byte\" name=\"distance\"/>\n                              </xs:sequence>\n                            </xs:complexType>\n                          </xs:element>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                    <xs:element name=\"posting-date\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:short\" name=\"year\"/>\n                          <xs:element type=\"xs:byte\" name=\"month\"/>\n                          <xs:element type=\"xs:byte\" name=\"day\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n            <xs:attribute type=\"xs:byte\" name=\"count\"/>\n            <xs:attribute type=\"xs:byte\" name=\"start\"/>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "jobGet-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"job\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:int\" name=\"id\"/>\n        <xs:element type=\"xs:long\" name=\"expiration-timestamp\"/>\n        <xs:element name=\"company\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:int\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"position\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"title\"/>\n              <xs:element name=\"location\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"name\"/>\n                    <xs:element name=\"country\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"code\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"location-description\"/>\n        <xs:element name=\"job-poster\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"first-name\"/>\n              <xs:element type=\"xs:string\" name=\"last-name\"/>\n              <xs:element type=\"xs:string\" name=\"headline\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        },
        {
            "jobUpdate-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"job\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"position\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"description\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"compensation\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"salary\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:string\" name=\"description\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
        },
        {
            "job-xml": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"job\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:int\" name=\"id\"/>\n        <xs:element type=\"xs:long\" name=\"expiration-timestamp\"/>\n        <xs:element name=\"company\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:int\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"name\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element name=\"position\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"title\"/>\n              <xs:element name=\"location\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element type=\"xs:string\" name=\"name\"/>\n                    <xs:element name=\"country\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element type=\"xs:string\" name=\"code\"/>\n                        </xs:sequence>\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"location-description\"/>\n        <xs:element name=\"job-poster\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"id\"/>\n              <xs:element type=\"xs:string\" name=\"first-name\"/>\n              <xs:element type=\"xs:string\" name=\"last-name\"/>\n              <xs:element type=\"xs:string\" name=\"headline\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
        }
    ],
    "traits": [
        {
            "hasModifiedFilter": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "modified-since": {
                        "name": "modified-since",
                        "displayName": "modified-since",
                        "type": "integer",
                        "required": false,
                        "example": "1267401600000",
                        "repeat": false,
                        "description": "Value as a Unix time stamp of milliseconds since epoch.\n",
                        "minimum": 0,
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "modified": {
                        "name": "modified",
                        "displayName": "modified",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Values are updated or new.\n",
                        "enum": [
                            "updated",
                            "new"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "hasModifiedFilter",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "hasMembership": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "membership-state": {
                        "name": "membership-state",
                        "displayName": "membership-state",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "The state of the callers membership to the specified group. Use the value member to retrieve the groups to which a\nuser belongs.\n",
                        "enum": [
                            "non-member",
                            "awaiting-confirmation",
                            "awaiting-parent-group-confirmation",
                            "member",
                            "moderator",
                            "manager",
                            "owner"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "hasMembership",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "hasRole": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "role": {
                        "name": "role",
                        "displayName": "role",
                        "type": "string",
                        "required": true,
                        "repeat": false,
                        "description": "Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.\n",
                        "enum": [
                            "creator",
                            "commenter",
                            "follower"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "hasRole",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "paged": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "count": {
                        "name": "count",
                        "displayName": "count",
                        "type": "integer",
                        "required": false,
                        "default": 10,
                        "example": "count=10",
                        "repeat": false,
                        "description": "Maximum",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "start": {
                        "name": "start",
                        "displayName": "start",
                        "type": "string",
                        "required": false,
                        "example": "start=0",
                        "repeat": false,
                        "description": "The offset by which to start Network Update pagination",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "paged",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "producesPosts": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "category": {
                        "name": "category",
                        "displayName": "category",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Category of posts.\n",
                        "enum": [
                            "discussion"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "order": {
                        "name": "order",
                        "displayName": "order",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Sort order for posts.\n",
                        "enum": [
                            "recency",
                            "popularity"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "modified-since": {
                        "name": "modified-since",
                        "displayName": "modified-since",
                        "type": "integer",
                        "required": false,
                        "example": "1302727083000",
                        "repeat": false,
                        "description": "Timestamp filter for posts created after the specified value.\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "producesPosts",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "filterable": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "keywords": {
                        "name": "keywords",
                        "displayName": "keywords",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Members who have all the keywords anywhere in their profile. Use this field when you don't know how to\nmore accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "facet": {
                        "name": "facet",
                        "displayName": "facet",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Facet values to search over.\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "facets": {
                        "name": "facets",
                        "displayName": "facets",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Facet buckets to return.      \n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    },
                    "sort": {
                        "name": "sort",
                        "displayName": "sort",
                        "type": "string",
                        "required": false,
                        "default": "connections",
                        "repeat": false,
                        "description": "\"Controls the search result order. There are four options:\nconnections: Number of connections per person, from largest to smallest.\nrecommenders: Number of recommendations per person, from largest to smallest.\ndistance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.\nrelevance: Relevance of results based on the query, from most to least relevant.          \nBy default, results are ordered by the number of connections.\"\n",
                        "enum": [
                            "connections",
                            "recommenders",
                            "distance",
                            "relevance"
                        ],
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "name": "filterable",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "secureUrlParam": {
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "queryParameters": {
                    "secure-urls": {
                        "name": "secure-urls",
                        "displayName": "secure-urls",
                        "type": "boolean",
                        "required": false,
                        "repeat": false,
                        "description": "secure-urls query parameter indicates that you want the URLs in your response to be HTTPS\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "displayName": {
                                    "calculated": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                },
                "description": "This trait should be used for indicate that you want the URLs in your response to be HTTPS\n",
                "name": "secureUrlParam",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        }
    ],
    "securedBy": [
        "oauth_2_0",
        "oauth_1_0"
    ],
    "securitySchemes": [
        {
            "oauth_2_0": {
                "name": "oauth_2_0",
                "type": "OAuth 2.0",
                "description": "LinkedIn supports OAuth 2.0 for authenticating all API requests.\n",
                "describedBy": {
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "oauth2_access_token": {
                            "name": "oauth2_access_token",
                            "displayName": "oauth2_access_token",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Used to send a valid OAuth 2 access token\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "settings": {
                    "accessTokenUri": "https://www.linkedin.com/uas/oauth2/accessToken",
                    "authorizationUri": "https://www.linkedin.com/uas/oauth2/authorization",
                    "authorizationGrants": [
                        "code"
                    ]
                }
            }
        },
        {
            "oauth_1_0": {
                "name": "oauth_1_0",
                "type": "OAuth 1.0",
                "description": "OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.\n",
                "settings": {
                    "requestTokenUri": "https://api.linkedin.com/uas/oauth/requestToken",
                    "authorizationUri": "https//www.linkedin.com/uas/oauth/authenticate",
                    "tokenCredentialsUri": "https://api.linkedin.com/uas/oauth/accessToken"
                }
            }
        }
    ],
    "resourceTypes": [
        {
            "member": {
                "name": "member",
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                },
                "post": {
                    "body": {
                        "application/json": {
                            "name": "application/json"
                        },
                        "application/xml": {
                            "name": "application/xml",
                            "schema": "<<type>>-xml",
                            "schemaContent": "<<type>>-xml"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "post",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "put": {
                    "body": {
                        "application/json": {
                            "name": "application/json"
                        },
                        "application/xml": {
                            "name": "application/xml",
                            "schema": "<<type>>-xml",
                            "schemaContent": "<<type>>-xml"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "put",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "get": {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "<<type>>-xml",
                                    "schemaContent": "<<type>>-xml"
                                }
                            }
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "get",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            }
        },
        {
            "baseResource": {
                "name": "baseResource",
                "usage": "All LinkedIn resources should use i\n",
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "description": "This is base resource type described common request and response headers and error response codes\n",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                },
                "delete": {
                    "responses": {
                        "204": {
                            "code": "204",
                            "description": "Your request to DELETE a record was successful\n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "method": "delete",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "post": {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Request succeeded\n"
                        },
                        "201": {
                            "code": "201",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "method": "post",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "put": {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Request succeeded\n"
                        },
                        "201": {
                            "code": "201",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.   \n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "method": "put",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "get": {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Request succeeded  \n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "format": {
                            "name": "format",
                            "displayName": "format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "method": "get",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            }
        },
        {
            "fieldSelectorMember": {
                "name": "fieldSelectorMember",
                "usage": "Use this resource type when field selectors exist in resource path\n",
                "type": {
                    "member": {
                        "type": "<<type>>"
                    }
                },
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "uriParameters": [
                    {
                        "name": "fieldSelectors",
                        "displayName": "Field Selectors",
                        "type": "string",
                        "required": true,
                        "example": ":(id,first-name,last-name,industry)",
                        "repeat": false,
                        "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                ],
                "description": "Describes field selectors uri path parameter\n",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "fieldSelectors": {
                "name": "fieldSelectors",
                "usage": "Use this resource type when field selectors exist in resource path\n",
                "type": "baseResource",
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "uriParameters": [
                    {
                        "name": "fieldSelectors",
                        "displayName": "Field Selectors",
                        "type": "string",
                        "required": true,
                        "example": ":(id,first-name,last-name,industry)",
                        "repeat": false,
                        "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                ],
                "description": "Describes field selectors uri path parameter\n",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        },
        {
            "collection": {
                "name": "collection",
                "type": "baseResource",
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                },
                "get": {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "<<type|!pluralize>>-xml",
                                    "schemaContent": "<<type|!pluralize>>-xml"
                                }
                            }
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "get",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "post": {
                    "body": {
                        "application/json": {
                            "name": "application/json"
                        },
                        "application/xml": {
                            "name": "application/xml",
                            "schema": "<<type>>-xml",
                            "schemaContent": "<<type>>-xml"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "post",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                "put": {
                    "body": {
                        "application/json": {
                            "name": "application/json"
                        },
                        "application/xml": {
                            "name": "application/xml",
                            "schema": "<<type>>-xml",
                            "schemaContent": "<<type>>-xml"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "method": "put",
                    "__METADATA__": {
                        "optional": true,
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            }
        },
        {
            "fieldSelectorCollection": {
                "name": "fieldSelectorCollection",
                "usage": "Use this resource type when field selectors exist in resource path\n",
                "type": {
                    "collection": {
                        "type": "<<type>>"
                    }
                },
                "securedBy": [
                    "oauth_2_0",
                    "oauth_1_0"
                ],
                "uriParameters": [
                    {
                        "name": "fieldSelectors",
                        "displayName": "Field Selectors",
                        "type": "string",
                        "required": true,
                        "example": ":(id,first-name,last-name,industry)",
                        "repeat": false,
                        "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                        "__METADATA__": {
                            "primitiveValuesMeta": {
                                "type": {
                                    "insertedAsDefault": true
                                },
                                "required": {
                                    "insertedAsDefault": true
                                },
                                "repeat": {
                                    "insertedAsDefault": true
                                }
                            }
                        }
                    }
                ],
                "description": "Describes field selectors uri path parameter\n",
                "__METADATA__": {
                    "primitiveValuesMeta": {
                        "securedBy": {
                            "calculated": true
                        }
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "relativeUri": "/people",
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "resources": [
                {
                    "relativeUri": "/~{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "currentUser"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "currentUser-xml",
                                            "schemaContent": "currentUser-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "secure-urls": {
                                    "name": "secure-urls",
                                    "displayName": "secure-urls",
                                    "type": "boolean",
                                    "required": false,
                                    "repeat": false,
                                    "description": "secure-urls query parameter indicates that you want the URLs in your response to be HTTPS\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns profile of the current user\n",
                            "method": "get",
                            "is": [
                                "secureUrlParam"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "Profile API",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "~{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/~",
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "resources": [
                        {
                            "relativeUri": "/group-memberships{fieldSelectors}",
                            "type": {
                                "fieldSelectorMember": {
                                    "type": "groupMembership"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "uriParameters": {
                                "fieldSelectors": {
                                    "name": "fieldSelectors",
                                    "displayName": "Field Selectors",
                                    "type": "string",
                                    "required": true,
                                    "example": ":(id,first-name,last-name,industry)",
                                    "repeat": false,
                                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "groupMembership-xml",
                                                    "schemaContent": "groupMembership-xml"
                                                }
                                            }
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "membership-state": {
                                            "name": "membership-state",
                                            "displayName": "membership-state",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "The state of the callers membership to the specified group. Use the value member to retrieve the groups to which a\nuser belongs.\n",
                                            "enum": [
                                                "non-member",
                                                "awaiting-confirmation",
                                                "awaiting-parent-group-confirmation",
                                                "member",
                                                "moderator",
                                                "manager",
                                                "owner"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "count": {
                                            "name": "count",
                                            "displayName": "count",
                                            "type": "integer",
                                            "required": false,
                                            "default": 10,
                                            "example": "count=10",
                                            "repeat": false,
                                            "description": "Maximum",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "start": {
                                            "name": "start",
                                            "displayName": "start",
                                            "type": "string",
                                            "required": false,
                                            "example": "start=0",
                                            "repeat": false,
                                            "description": "The offset by which to start Network Update pagination",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Returns Group Memberships for a User\n",
                                    "method": "get",
                                    "is": [
                                        "hasMembership",
                                        "paged"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                },
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "description": "OK"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "groupMembership-xml",
                                            "schemaContent": "groupMembership-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "description": "POSTs additional group settings information\n",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "Groups API",
                            "description": "Describes field selectors uri path parameter\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "group-memberships{fieldSelectors}"
                            ]
                        },
                        {
                            "relativeUri": "/group-memberships",
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/{groupId}{fieldSelectors}",
                                    "type": "fieldSelectors",
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "groupId": {
                                            "name": "groupId",
                                            "displayName": "Numeric group ID",
                                            "type": "integer",
                                            "required": true,
                                            "repeat": false,
                                            "description": "The unique identifier for a LinkedIn group\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "fieldSelectors": {
                                            "name": "fieldSelectors",
                                            "displayName": "Field Selectors",
                                            "type": "string",
                                            "required": true,
                                            "example": ":(id,first-name,last-name,industry)",
                                            "repeat": false,
                                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "people-gm-group-xml",
                                                            "example": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n<group-membership>\n  <show-group-logo-in-profile>true</show-group-logo-in-profile>\n  <email-digest-frequency>\n    <code>daily</code>\n  </email-digest-frequency>\n  <email-announcements-from-managers>true</email-announcements-from-managers>\n  <allow-messages-from-members>true</allow-messages-from-members>\n  <email-for-every-new-post>true</email-for-every-new-post>\n</group-membership>",
                                                            "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"group-membership\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:string\" name=\"show-group-logo-in-profile\"/>\n        <xs:element name=\"email-digest-frequency\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"email-announcements-from-managers\"/>\n        <xs:element type=\"xs:string\" name=\"allow-messages-from-members\"/>\n        <xs:element type=\"xs:string\" name=\"email-for-every-new-post\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
                                                        },
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "membership-state": {
                                                    "name": "membership-state",
                                                    "displayName": "membership-state",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "The state of the callers membership to the specified group. Use the value member to retrieve the groups to which a\nuser belongs.\n",
                                                    "enum": [
                                                        "non-member",
                                                        "awaiting-confirmation",
                                                        "awaiting-parent-group-confirmation",
                                                        "member",
                                                        "moderator",
                                                        "manager",
                                                        "owner"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Returns Group settings\n",
                                            "method": "get",
                                            "is": [
                                                "hasMembership"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        }
                                                    },
                                                    "description": "OK"
                                                },
                                                "201": {
                                                    "code": "201",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        }
                                                    },
                                                    "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.   \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "people-gm-group-xml",
                                                    "example": "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n<group-membership>\n  <show-group-logo-in-profile>true</show-group-logo-in-profile>\n  <email-digest-frequency>\n    <code>daily</code>\n  </email-digest-frequency>\n  <email-announcements-from-managers>true</email-announcements-from-managers>\n  <allow-messages-from-members>true</allow-messages-from-members>\n  <email-for-every-new-post>true</email-for-every-new-post>\n</group-membership>",
                                                    "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"group-membership\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element type=\"xs:string\" name=\"show-group-logo-in-profile\"/>\n        <xs:element name=\"email-digest-frequency\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element type=\"xs:string\" name=\"code\"/>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n        <xs:element type=\"xs:string\" name=\"email-announcements-from-managers\"/>\n        <xs:element type=\"xs:string\" name=\"allow-messages-from-members\"/>\n        <xs:element type=\"xs:string\" name=\"email-for-every-new-post\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Change Group settings\n",
                                            "method": "put",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "responses": {
                                                "204": {
                                                    "code": "204",
                                                    "description": "Your request to DELETE a record was successful\n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Leave a Group",
                                            "method": "delete",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "Groups API",
                                    "description": "Describes field selectors uri path parameter\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "{groupId}{fieldSelectors}"
                                    ]
                                },
                                {
                                    "relativeUri": "/{groupId}/posts{fieldSelectors}",
                                    "type": {
                                        "fieldSelectorCollection": {
                                            "type": "post"
                                        }
                                    },
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "groupId": {
                                            "name": "groupId",
                                            "displayName": "groupId",
                                            "type": "string",
                                            "required": true,
                                            "repeat": false,
                                            "__METADATA__": {
                                                "calculated": true,
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "fieldSelectors": {
                                            "name": "fieldSelectors",
                                            "displayName": "Field Selectors",
                                            "type": "string",
                                            "required": true,
                                            "example": ":(id,first-name,last-name,industry)",
                                            "repeat": false,
                                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/json": {
                                                            "name": "application/json"
                                                        },
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "posts-xml",
                                                            "schemaContent": "posts-xml"
                                                        },
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "count": {
                                                    "name": "count",
                                                    "displayName": "count",
                                                    "type": "integer",
                                                    "required": false,
                                                    "default": 10,
                                                    "example": "count=10",
                                                    "repeat": false,
                                                    "description": "Maximum",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "start": {
                                                    "name": "start",
                                                    "displayName": "start",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "start=0",
                                                    "repeat": false,
                                                    "description": "The offset by which to start Network Update pagination",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "role": {
                                                    "name": "role",
                                                    "displayName": "role",
                                                    "type": "string",
                                                    "required": true,
                                                    "repeat": false,
                                                    "description": "Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.\n",
                                                    "enum": [
                                                        "creator",
                                                        "commenter",
                                                        "follower"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "category": {
                                                    "name": "category",
                                                    "displayName": "category",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Category of posts.\n",
                                                    "enum": [
                                                        "discussion"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "order": {
                                                    "name": "order",
                                                    "displayName": "order",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Sort order for posts.\n",
                                                    "enum": [
                                                        "recency",
                                                        "popularity"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "modified-since": {
                                                    "name": "modified-since",
                                                    "displayName": "modified-since",
                                                    "type": "integer",
                                                    "required": false,
                                                    "example": "1302727083000",
                                                    "repeat": false,
                                                    "description": "Timestamp filter for posts created after the specified value.\n",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Returns a Group's Discussion Posts\n",
                                            "method": "get",
                                            "is": [
                                                "paged",
                                                "hasRole",
                                                "producesPosts"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/{groupId}/posts{fieldSelectors}",
                                    "description": "Describes field selectors uri path parameter\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "{groupId}",
                                        "posts{fieldSelectors}"
                                    ]
                                }
                            ],
                            "displayName": "/group-memberships",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "group-memberships"
                            ]
                        },
                        {
                            "relativeUri": "/job-bookmarks",
                            "type": {
                                "collection": {
                                    "type": "jobBookmark"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "jobBookmarks-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<job-bookmarks total=\"2\">\n  <job-bookmark>\n    <is-applied>false</is-applied>\n    <is-saved>true</is-saved>\n    <saved-timestamp>1306261147000</saved-timestamp>\n    <job>\n      <id>1641165</id>\n      <active>true</active>\n      <company>\n        <id>35876</id>\n        <name>ClairMail</name>\n      </company>\n      <position>\n        <title>Senior Technical Writer</title>\n      </position>\n      <description-snippet>The Technical Writer will be responsible for creating, maintaining and \nupdating documentation, including internal and external facing technical documentation of ClairMail software, \nsuch as user guides, installation guides, configuration guides, and developers guides. The products are \nenterprise software products and the audience is technical, so the candidate must be able to understand highly tec</description-snippet>\n      <posting-timestamp>1306256696000</posting-timestamp>\n    </job>\n  </job-bookmark>\n  <job-bookmark>\n    <is-applied>false</is-applied>\n    <is-saved>true</is-saved>\n    <saved-timestamp>1306261165000</saved-timestamp>\n    <job>\n      <id>1578133</id>\n      <active>true</active>\n      <company>\n        <id>26909</id>\n        <name>Greenplum</name>\n      </company>\n      <position>\n        <title>Senior Manager Technical Publications</title>\n      </position>\n      <description-snippet>Greenplum is seeking an experienced Senior Manager, Technical Publications to \nsupport its worldwide technical content demand and generation efforts.  The Senior Manager will report to the \nVice-President of Engineering, and will be responsible for developing work plans, establishing technical and \nother functional objectives, assigning tasks, and managing groups/teams. Maintains schedules and coordi</description-snippet>\n      <posting-timestamp>1303854887000</posting-timestamp>\n    </job>\n  </job-bookmark>\n</job-bookmarks>",
                                                    "schemaContent": "jobBookmarks-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "text/xml": {
                                                    "name": "text/xml"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Returns Job Bookmarks\n",
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                },
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "OK"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "jobBookmark-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n  <job-bookmark>\r\n    <job>\r\n      <id>{job-id}</id>\r\n    </job>\r\n  </job-bookmark>",
                                            "schemaContent": "jobBookmark-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Bookmarking a Job\n",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/{jobId}",
                                    "type": "baseResource",
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "jobId": {
                                            "name": "jobId",
                                            "displayName": "Job ID",
                                            "type": "string",
                                            "required": true,
                                            "repeat": false,
                                            "description": "The unique identifier for a job.\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "204": {
                                                    "code": "204",
                                                    "description": "Your request to DELETE a record was successful\n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Deleting a Job Bookmark\n",
                                            "method": "delete",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/{jobId}",
                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "{jobId}"
                                    ]
                                }
                            ],
                            "displayName": "Job Bookmarks and Suggestions API",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "job-bookmarks"
                            ]
                        },
                        {
                            "relativeUri": "/suggestions",
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/groups{fieldSelectors}",
                                    "type": "fieldSelectors",
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "fieldSelectors": {
                                            "name": "fieldSelectors",
                                            "displayName": "Field Selectors",
                                            "type": "string",
                                            "required": true,
                                            "example": ":(id,first-name,last-name,industry)",
                                            "repeat": false,
                                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Get Suggested Groups for a User\n",
                                            "method": "get",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "resources": [
                                        {
                                            "relativeUri": "/{groupId}",
                                            "type": "baseResource",
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "uriParameters": {
                                                "groupId": {
                                                    "name": "groupId",
                                                    "displayName": "Numeric group ID",
                                                    "type": "integer",
                                                    "required": true,
                                                    "repeat": false,
                                                    "description": "The unique identifier for a LinkedIn group\n",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "methods": [
                                                {
                                                    "responses": {
                                                        "200": {
                                                            "code": "200",
                                                            "description": "OK"
                                                        },
                                                        "204": {
                                                            "code": "204",
                                                            "description": "Your request to DELETE a record was successful\n"
                                                        },
                                                        "400": {
                                                            "code": "400",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Your request was not formatted correctly\n"
                                                        },
                                                        "401": {
                                                            "code": "401",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The OAuth signature was bad\n"
                                                        },
                                                        "403": {
                                                            "code": "403",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                        },
                                                        "404": {
                                                            "code": "404",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                        },
                                                        "405": {
                                                            "code": "405",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                        },
                                                        "500": {
                                                            "code": "500",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "There was an application error on the LinkedIn server.\n"
                                                        }
                                                    },
                                                    "protocols": [
                                                        "HTTPS"
                                                    ],
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "headers": {
                                                        "x-li-format": {
                                                            "name": "x-li-format",
                                                            "displayName": "x-li-format",
                                                            "type": "string",
                                                            "required": false,
                                                            "repeat": false,
                                                            "description": "Type of data\n",
                                                            "enum": [
                                                                "xml",
                                                                "json",
                                                                "jsonp"
                                                            ],
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "description": "Remove a Group Suggestion for a Use\n",
                                                    "method": "delete",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "protocols": {
                                                                "calculated": true
                                                            },
                                                            "securedBy": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    }
                                                }
                                            ],
                                            "displayName": "/{groupId}",
                                            "description": "This is base resource type described common request and response headers and error response codes\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "securedBy": {
                                                        "calculated": true
                                                    },
                                                    "displayName": {
                                                        "calculated": true
                                                    }
                                                }
                                            },
                                            "relativeUriPathSegments": [
                                                "{groupId}"
                                            ]
                                        }
                                    ],
                                    "displayName": "/groups{fieldSelectors}",
                                    "description": "Describes field selectors uri path parameter\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "groups{fieldSelectors}"
                                    ]
                                },
                                {
                                    "relativeUri": "/job-suggestions{fieldSelectors}",
                                    "type": {
                                        "fieldSelectorCollection": {
                                            "type": "jobSuggestion"
                                        }
                                    },
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "fieldSelectors": {
                                            "name": "fieldSelectors",
                                            "displayName": "Field Selectors",
                                            "type": "string",
                                            "required": true,
                                            "example": ":(id,first-name,last-name,industry)",
                                            "repeat": false,
                                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "jobSuggestions-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<job-suggestions>\n  <jobs total=\"50\" count=\"10\" start=\"0\">\n    <job>\n      <id>1577323</id>\n      <company>\n        <id>1281</id>\n        <name>Unisys</name>\n      </company>\n      <job-poster>\n        <id>OHYinXGMKT</id>\n        <first-name>Joanne</first-name>\n        <last-name>Rawls</last-name>\n        <headline>Recruiting Lead at Unisys Corporation</headline>\n      </job-poster>\n      <description-snippet>Unisys is expanding our Federal Proposal Development Center and looking for talented professionals to join our team. As a Senior Technical Writer, you will be responsible for: Analyzing Request for Proposals (RFP) and work with Solution Architects to package company services into a technical proposal response; write technical proposals that spell out what the company can offer to the agency seek</description-snippet>\n      <location-description>Reston, VA  </location-description>\n    </job>\n    <job>\n      <id>1579926</id>\n      <company>\n        <id>15759</id>\n        <name>Velti</name>\n      </company>\n      <salary>Negotiable</salary>\n      <job-poster>\n        <id>UlfGF2nmYN</id>\n        <first-name>Maria</first-name>\n        <last-name>Maragoudakis-Gregoriou</last-name>\n        <headline>Experienced Business Manager with extensive international and start-up experience</headline>\n      </job-poster>\n      <description-snippet>Senior Technical Writer (Job Code: SF-SRTCR) Velti is a leading global provider of mobile marketing and advertising software solutions that enable brands, advertising agencies, mobile operators, and media companies to implement highly targeted, interactive, and measurable campaigns by communicating with and engaging consumers via their mobile devices. Job DescriptionThe Senior Technical Writer pos</description-snippet>\n      <location-description>San Francisco</location-description>\n    </job>\n    <job>\n      <id>1609091</id>\n      <company>\n      </company>\n      <salary>Annual Salary, Bonus</salary>\n      <job-poster>\n        <id>VLhDZNHMmG</id>\n        <first-name>Ties</first-name>\n        <last-name>van de Voort</last-name>\n        <headline>International Corporate Recruiter at SDL Tridion</headline>\n      </job-poster>\n      <description-snippet>The Senior Technical Support Engineer works in a team of support engineers and reports to the Manager Customer Support. The Senior Technical Support Engineer is guarding and meeting service levels as agreed with customers, partners and the internal organization. The Senior Technical Support Engineer independently provides complex technical support to customers and partners, provides onsite support</description-snippet>\n      <location-description>New York</location-description>\n    </job>\n </jobs>\n</job-suggestions>",
                                                            "schemaContent": "jobSuggestions-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        },
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Retrieving a List of a Member's Suggested Jobs\n",
                                            "method": "get",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/job-suggestions{fieldSelectors}",
                                    "description": "Describes field selectors uri path parameter\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "job-suggestions{fieldSelectors}"
                                    ]
                                },
                                {
                                    "relativeUri": "/to-follow/companies",
                                    "type": {
                                        "collection": {
                                            "type": "company"
                                        }
                                    },
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "companies-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<companies count=\"10\" start=\"0\">\r\n  <company>\r\n    <id>49648</id>\r\n    <name>Merix Financial</name>\r\n  </company>\r\n  <company>\r\n    <id>118370</id>\r\n    <name>Movaya Wireless</name>\r\n  </company>\r\n  <company>\r\n    <id>119265</id>\r\n    <name>Maison Martin Margiela</name>\r\n  </company>\r\n  <company>\r\n    <id>112571</id>\r\n    <name>CoActive</name>\r\n  </company>\r\n  <company>\r\n    <id>97548</id>\r\n    <name>Actronic</name>\r\n  </company>\r\n  <company>\r\n    <id>1115987</id>\r\n    <name>EELA</name>\r\n  </company>\r\n  <company>\r\n    <id>2204291</id>\r\n    <name>OfftheHookHats.org</name>\r\n  </company>\r\n  <company>\r\n    <id>1973202</id>\r\n    <name>Ministry of Communication and Information Technology</name>\r\n  </company>\r\n  <company>\r\n    <id>2102550</id>\r\n    <name>Lundsbergs skola</name>\r\n  </company>\r\n  <company>\r\n    <id>1086137</id>\r\n    <name>Netsolve Limited</name>\r\n  </company>\r\n</companies>",
                                                            "schemaContent": "companies-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        },
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "You can retrieve a collection of suggested companies for the current user.",
                                            "method": "get",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/to-follow/companies",
                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "to-follow",
                                        "companies"
                                    ]
                                }
                            ],
                            "displayName": "Groups API",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "suggestions"
                            ]
                        },
                        {
                            "relativeUri": "/connections{fieldSelectors}",
                            "type": {
                                "fieldSelectorCollection": {
                                    "type": "connection"
                                }
                            },
                            "is": [
                                "paged",
                                "hasModifiedFilter"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "uriParameters": {
                                "fieldSelectors": {
                                    "name": "fieldSelectors",
                                    "displayName": "Field Selectors",
                                    "type": "string",
                                    "required": true,
                                    "example": ":(id,first-name,last-name,industry)",
                                    "repeat": false,
                                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "connections-xml",
                                                    "schemaContent": "connections-xml"
                                                },
                                                "text/xml": {
                                                    "name": "text/xml"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "count": {
                                            "name": "count",
                                            "displayName": "count",
                                            "type": "integer",
                                            "required": false,
                                            "default": 10,
                                            "example": "count=10",
                                            "repeat": false,
                                            "description": "Maximum",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "start": {
                                            "name": "start",
                                            "displayName": "start",
                                            "type": "string",
                                            "required": false,
                                            "example": "start=0",
                                            "repeat": false,
                                            "description": "The offset by which to start Network Update pagination",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "modified-since": {
                                            "name": "modified-since",
                                            "displayName": "modified-since",
                                            "type": "integer",
                                            "required": false,
                                            "example": "1267401600000",
                                            "repeat": false,
                                            "description": "Value as a Unix time stamp of milliseconds since epoch.\n",
                                            "minimum": 0,
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "modified": {
                                            "name": "modified",
                                            "displayName": "modified",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Values are updated or new.\n",
                                            "enum": [
                                                "updated",
                                                "new"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Returns a list of 1st degree connections for a user who has granted access to his/her accoun\n",
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "Connections API",
                            "description": "Describes field selectors uri path parameter\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "connections{fieldSelectors}"
                            ]
                        },
                        {
                            "relativeUri": "/network",
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/updates",
                                    "type": {
                                        "member": {
                                            "type": "update"
                                        }
                                    },
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "update-xml",
                                                            "example": "<update>\r\n   <timestamp>1315338683355</timestamp>\r\n   <update-type>CMPY</update-type>\r\n   <update-content>\r\n      <company>\r\n         <id>1337</id>\r\n         <name>LinkedIn</name>\r\n      </company>\r\n      <company-person-update>\r\n          <person>\r\n              <id>14381178</id>\r\n                  <first-name>Patrick</first-name>\r\n                  <last-name>Smith</last-name>\r\n                  <headline>Enterprise Relationship Manager at LinkedIn</headline>\r\n                  <picture-url>http://media.linkedin.com/mpr/mprx/0_gPLYkP6SpokSOnUc0-vDkA9DYulmpzUc0tA3krFxTW5YiluBAvztoKPlKGAlx-sRyKF8wBMg5HkD</picture-url>\r\n                  <api-standard-profile-request>\r\n                      <url>http://api.linkedin.com/v1/people/14381178</url>\r\n                      <headers total=\"1\">\r\n                           <http-header>\r\n                              <name>x-li-auth-token</name>\r\n                              <value>name:4gRT</value>\r\n                           </http-header>\r\n                      </headers>\r\n                  </api-standard-profile-request>\r\n                  <site-standard-profile-request>\r\n                        <url>http://www.linkedin.com/profile?viewProfile=&amp;key=14381178&amp;authToken=4gRT&amp;authType=name&amp;trk=api*</url>\r\n                  </site-standard-profile-request>\r\n             </person>\r\n             <action>\r\n                <code>joined</code>\r\n             </action>\r\n             <old-position>\r\n                  <title>Actor</title>\r\n                  <company>\r\n                       <name>IndependentContractor</name>\r\n                  </company>\r\n             </old-position>\r\n             <new-position>\r\n                  <title>Enterprise Relationship Manager</title>\r\n                  <company>\r\n                       <id>1337</id>\r\n                       <name>LinkedIn</name>\r\n                  </company>\r\n             </new-position>\r\n         </company-person-update>\r\n     </update-content>\r\n</update>",
                                                            "schemaContent": "update-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        }
                                                    }
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "scope": {
                                                    "name": "scope",
                                                    "displayName": "scope",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "self",
                                                    "repeat": false,
                                                    "description": "self to return member's feed. Omitted to return aggregated network feed.",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "type": {
                                                    "name": "type",
                                                    "displayName": "type",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "JOBP",
                                                    "repeat": false,
                                                    "description": "Any valid Network Update Type from the table below. Types must be in all capital letters. To specify more than one Network Update type, add the type parameter to the resource URL for each type.",
                                                    "enum": [
                                                        "PROF",
                                                        "CCEM",
                                                        "APPS",
                                                        "SVPR",
                                                        "STAT",
                                                        "JGRP",
                                                        "MSFC",
                                                        "VIRL",
                                                        "PREC",
                                                        "PICU",
                                                        "JOBP",
                                                        "CONN",
                                                        "CMPY",
                                                        "SHAR",
                                                        "APPM",
                                                        "PFOL",
                                                        "PRFX"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "after": {
                                                    "name": "after",
                                                    "displayName": "after",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "1243834824000",
                                                    "repeat": false,
                                                    "description": "timestamp after which to retrieve updates for (Ex: 1243834824000) note: precision is milliseconds since the epoch",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "before": {
                                                    "name": "before",
                                                    "displayName": "before",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "1243834824000",
                                                    "repeat": false,
                                                    "description": "timestamp before which to retrieve updates for (Ex: 1243834824000) note: precision is milliseconds since the epoch",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "show-hidden-members": {
                                                    "name": "show-hidden-members",
                                                    "displayName": "show-hidden-members",
                                                    "type": "boolean",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "true or false. default is false. Whether to display updates from people the member has chosen to \"hide\" from their update stream.",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "count": {
                                                    "name": "count",
                                                    "displayName": "count",
                                                    "type": "integer",
                                                    "required": false,
                                                    "default": 10,
                                                    "example": "count=10",
                                                    "repeat": false,
                                                    "description": "Maximum",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                },
                                                "start": {
                                                    "name": "start",
                                                    "displayName": "start",
                                                    "type": "string",
                                                    "required": false,
                                                    "example": "start=0",
                                                    "repeat": false,
                                                    "description": "The offset by which to start Network Update pagination",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Retreive updates.",
                                            "method": "get",
                                            "is": [
                                                "paged"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "resources": [
                                        {
                                            "relativeUri": "/key={NetworkUpdateKey}",
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "uriParameters": {
                                                "NetworkUpdateKey": {
                                                    "name": "NetworkUpdateKey",
                                                    "displayName": "NetworkUpdateKey",
                                                    "type": "string",
                                                    "required": true,
                                                    "repeat": false,
                                                    "__METADATA__": {
                                                        "calculated": true,
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "resources": [
                                                {
                                                    "relativeUri": "/likes",
                                                    "type": {
                                                        "collection": {
                                                            "type": "update"
                                                        }
                                                    },
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "methods": [
                                                        {
                                                            "responses": {
                                                                "200": {
                                                                    "code": "200",
                                                                    "body": {
                                                                        "application/xml": {
                                                                            "name": "application/xml",
                                                                            "schema": "updates-xml",
                                                                            "example": "<network>\r\n  <updates total=\"1\">\r\n    <update>\r\n      <timestamp>1257187431000</timestamp>\r\n      <update-key>STAT-54321-11</update-key>\r\n      <update-type>STAT</update-type>\r\n      <update-content>\r\n        <person>\r\n          <id>abcdefg</id>\r\n          <first-name>Richard</first-name>\r\n          <last-name>Brautigan</last-name>\r\n          <headline>Author</headline>\r\n          <current-status>is thinking about rivers.</current-status>\r\n          <api-standard-profile-request>\r\n            <url>http://api.linkedin.com/v1/people/abcdefg:full</url>\r\n            <headers total=\"1\">\r\n              <http-header>\r\n                <name>x-li-auth-token</name>\r\n                <value>name:abcdefg</value>\r\n              </http-header>\r\n            </headers>\r\n          </api-standard-profile-request>\r\n          <site-standard-profile-request>\r\n            <url>http://www.linkedin.com/profile?viewProfile=&amp;key=abcdefg&amp;authToken=abcdefg&amp;authType=name</url>\r\n          </site-standard-profile-request>\r\n        </person>\r\n      </update-content>\r\n      <is-commentable>true</is-commentable>\r\n      <update-comments total=\"1\">\r\n        <update-comment>\r\n          <id>22995112</id>\r\n          <sequence-number>0</sequence-number>\r\n          <timestamp>1284737901266</timestamp>\r\n          <comment>You've got me thinking about trout.</comment>\r\n          <person>\r\n            <id>zyxwvut</id>\r\n            <first-name>Gertrude</first-name>\r\n            <last-name>Stein</last-name>\r\n            <headline>Author</headline>\r\n            <api-standard-profile-request>\r\n              <url>http://api.linkedin.com/v1/people/dsfsf:full</url>\r\n              <headers total=\"1\">\r\n                <http-header>\r\n                  <name>x-li-auth-token</name>\r\n                  <value>name:dsfsf</value>\r\n                </http-header>\r\n              </headers>\r\n            </api-standard-profile-request>\r\n            <site-standard-profile-request>\r\n              <url>http://www.linkedin.com/profile?viewProfile=&amp;key=dsfsf&amp;authToken=dsfsf&amp;authType=name</url>\r\n            </site-standard-profile-request>\r\n          </person>\r\n        </update-comment>\r\n      </update-comments>\r\n      <is-likable>true</is-likable>\r\n      <is-liked>true</is-liked>\r\n      <num-likes>1</num-likes>\r\n      <likes total=\"1\">\r\n        <like>\r\n          <person>\r\n            <id>POfcN6JhcU</id>\r\n            <first-name>George</first-name>\r\n            <last-name>Washington</last-name>\r\n            <headline>President, United States of America</headline>\r\n          </person>\r\n        </like>\r\n      </likes> \r\n    </update>\r\n  </updates>\r\n</network>",
                                                                            "schemaContent": "updates-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        },
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        }
                                                                    },
                                                                    "description": "Request succeeded  \n"
                                                                },
                                                                "400": {
                                                                    "code": "400",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Your request was not formatted correctly\n"
                                                                },
                                                                "401": {
                                                                    "code": "401",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The OAuth signature was bad\n"
                                                                },
                                                                "403": {
                                                                    "code": "403",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                                },
                                                                "404": {
                                                                    "code": "404",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                                },
                                                                "405": {
                                                                    "code": "405",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                                },
                                                                "500": {
                                                                    "code": "500",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                                }
                                                            },
                                                            "protocols": [
                                                                "HTTPS"
                                                            ],
                                                            "securedBy": [
                                                                "oauth_2_0",
                                                                "oauth_1_0"
                                                            ],
                                                            "queryParameters": {
                                                                "format": {
                                                                    "name": "format",
                                                                    "displayName": "format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "headers": {
                                                                "x-li-format": {
                                                                    "name": "x-li-format",
                                                                    "displayName": "x-li-format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "description": "Use a similar syntax to retrive the complete list of people who liked an update",
                                                            "method": "get",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "protocols": {
                                                                        "calculated": true
                                                                    },
                                                                    "securedBy": {
                                                                        "calculated": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "displayName": "/likes",
                                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "securedBy": {
                                                                "calculated": true
                                                            },
                                                            "displayName": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    },
                                                    "relativeUriPathSegments": [
                                                        "likes"
                                                    ]
                                                },
                                                {
                                                    "relativeUri": "/update-comments",
                                                    "type": "baseResource",
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "methods": [
                                                        {
                                                            "responses": {
                                                                "200": {
                                                                    "code": "200",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        }
                                                                    },
                                                                    "description": "Request succeeded\n"
                                                                },
                                                                "201": {
                                                                    "code": "201",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        }
                                                                    },
                                                                    "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                                                },
                                                                "400": {
                                                                    "code": "400",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Your request was not formatted correctly\n"
                                                                },
                                                                "401": {
                                                                    "code": "401",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The OAuth signature was bad\n"
                                                                },
                                                                "403": {
                                                                    "code": "403",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                                },
                                                                "404": {
                                                                    "code": "404",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                                },
                                                                "405": {
                                                                    "code": "405",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                                },
                                                                "500": {
                                                                    "code": "500",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                                }
                                                            },
                                                            "body": {
                                                                "application/xml": {
                                                                    "name": "application/xml",
                                                                    "schema": "update-comment-xml",
                                                                    "example": "<?xml version='1.0' encoding='UTF-8'?>\r\n<update-comment>\r\n  <comment>Save me a trout, Richard!</comment>\r\n</update-comment>",
                                                                    "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"update-comment\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:string\" name=\"comment\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
                                                                }
                                                            },
                                                            "protocols": [
                                                                "HTTPS"
                                                            ],
                                                            "securedBy": [
                                                                "oauth_2_0",
                                                                "oauth_1_0"
                                                            ],
                                                            "headers": {
                                                                "x-li-format": {
                                                                    "name": "x-li-format",
                                                                    "displayName": "x-li-format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "description": "When you want to post a new comment to an existing update:\nEnsure update/is-commentable is set to true\nTake the update/update-key from an existing update and POST to the following URL structure:\n",
                                                            "method": "post",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "protocols": {
                                                                        "calculated": true
                                                                    },
                                                                    "securedBy": {
                                                                        "calculated": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "responses": {
                                                                "200": {
                                                                    "code": "200",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        }
                                                                    },
                                                                    "description": "Request succeeded  \n"
                                                                },
                                                                "400": {
                                                                    "code": "400",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Your request was not formatted correctly\n"
                                                                },
                                                                "401": {
                                                                    "code": "401",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The OAuth signature was bad\n"
                                                                },
                                                                "403": {
                                                                    "code": "403",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                                },
                                                                "404": {
                                                                    "code": "404",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                                },
                                                                "405": {
                                                                    "code": "405",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                                },
                                                                "500": {
                                                                    "code": "500",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                                }
                                                            },
                                                            "protocols": [
                                                                "HTTPS"
                                                            ],
                                                            "securedBy": [
                                                                "oauth_2_0",
                                                                "oauth_1_0"
                                                            ],
                                                            "queryParameters": {
                                                                "format": {
                                                                    "name": "format",
                                                                    "displayName": "format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "headers": {
                                                                "x-li-format": {
                                                                    "name": "x-li-format",
                                                                    "displayName": "x-li-format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "description": "By default, a network update containing more than 10 comments will only return you the most recent five. To retrieve all comments for a given network update",
                                                            "method": "get",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "protocols": {
                                                                        "calculated": true
                                                                    },
                                                                    "securedBy": {
                                                                        "calculated": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "displayName": "/update-comments",
                                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "securedBy": {
                                                                "calculated": true
                                                            },
                                                            "displayName": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    },
                                                    "relativeUriPathSegments": [
                                                        "update-comments"
                                                    ]
                                                },
                                                {
                                                    "relativeUri": "/is-liked",
                                                    "type": "baseResource",
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "methods": [
                                                        {
                                                            "responses": {
                                                                "200": {
                                                                    "code": "200",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        }
                                                                    },
                                                                    "description": "Request succeeded\n"
                                                                },
                                                                "201": {
                                                                    "code": "201",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json"
                                                                        }
                                                                    },
                                                                    "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.   \n"
                                                                },
                                                                "400": {
                                                                    "code": "400",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Your request was not formatted correctly\n"
                                                                },
                                                                "401": {
                                                                    "code": "401",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The OAuth signature was bad\n"
                                                                },
                                                                "403": {
                                                                    "code": "403",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                                },
                                                                "404": {
                                                                    "code": "404",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                                },
                                                                "405": {
                                                                    "code": "405",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                                },
                                                                "500": {
                                                                    "code": "500",
                                                                    "body": {
                                                                        "text/xml": {
                                                                            "name": "text/xml",
                                                                            "schema": "error-xml",
                                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                            "schemaContent": "error-xml"
                                                                        },
                                                                        "application/json": {
                                                                            "name": "application/json",
                                                                            "schema": "error-schema",
                                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                            "schemaContent": "error-schema"
                                                                        }
                                                                    },
                                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                                }
                                                            },
                                                            "body": {
                                                                "application/xml": {
                                                                    "name": "application/xml",
                                                                    "schema": "is-liked-xml",
                                                                    "example": "<?xml version='1.0' encoding='UTF-8'?>\r\n<is-liked>true</is-liked>",
                                                                    "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"is-liked\" type=\"xs:string\"/>\r\n</xs:schema>"
                                                                }
                                                            },
                                                            "protocols": [
                                                                "HTTPS"
                                                            ],
                                                            "securedBy": [
                                                                "oauth_2_0",
                                                                "oauth_1_0"
                                                            ],
                                                            "headers": {
                                                                "x-li-format": {
                                                                    "name": "x-li-format",
                                                                    "displayName": "x-li-format",
                                                                    "type": "string",
                                                                    "required": false,
                                                                    "repeat": false,
                                                                    "description": "Type of data\n",
                                                                    "enum": [
                                                                        "xml",
                                                                        "json",
                                                                        "jsonp"
                                                                    ],
                                                                    "__METADATA__": {
                                                                        "primitiveValuesMeta": {
                                                                            "displayName": {
                                                                                "calculated": true
                                                                            },
                                                                            "type": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "required": {
                                                                                "insertedAsDefault": true
                                                                            },
                                                                            "repeat": {
                                                                                "insertedAsDefault": true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "description": "A successful comment PUT will return a 201 Content Created status code.",
                                                            "method": "put",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "protocols": {
                                                                        "calculated": true
                                                                    },
                                                                    "securedBy": {
                                                                        "calculated": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "displayName": "/is-liked",
                                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "securedBy": {
                                                                "calculated": true
                                                            },
                                                            "displayName": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    },
                                                    "relativeUriPathSegments": [
                                                        "is-liked"
                                                    ]
                                                }
                                            ],
                                            "displayName": "/key={NetworkUpdateKey}",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "securedBy": {
                                                        "calculated": true
                                                    },
                                                    "displayName": {
                                                        "calculated": true
                                                    }
                                                }
                                            },
                                            "relativeUriPathSegments": [
                                                "key={NetworkUpdateKey}"
                                            ]
                                        }
                                    ],
                                    "displayName": "/updates",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "updates"
                                    ]
                                },
                                {
                                    "relativeUri": "/network-stats",
                                    "type": {
                                        "collection": {
                                            "type": "networkStat"
                                        }
                                    },
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "methods": [
                                        {
                                            "responses": {
                                                "200": {
                                                    "code": "200",
                                                    "body": {
                                                        "application/xml": {
                                                            "name": "application/xml",
                                                            "schema": "networkStats-xml",
                                                            "example": "<network-stats total=\"2\">\r\n  <property key=\"degree-1-count\">123</property>\r\n  <property key=\"degree-2-count\">13633</property>\r\n</network-stats>",
                                                            "schemaContent": "networkStats-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json"
                                                        },
                                                        "text/xml": {
                                                            "name": "text/xml"
                                                        }
                                                    },
                                                    "description": "Request succeeded  \n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "queryParameters": {
                                                "format": {
                                                    "name": "format",
                                                    "displayName": "format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Information about the member's network, such as how many connections they have one and two degrees away.",
                                            "method": "get",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/network-stats",
                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "network-stats"
                                    ]
                                }
                            ],
                            "displayName": "/network",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "network"
                            ]
                        },
                        {
                            "relativeUri": "/person-activities",
                            "type": {
                                "collection": {
                                    "type": "activity"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded\n"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "activity-xml",
                                            "example": "<activity locale=\"en_US\">\r\n    <content-type>linkedin-html</content-type>\r\n    <body>&amp;lt;a href=&amp;quot;http://www.linkedin.com/profile?viewProfile=&amp;amp;key=3639896&amp;amp;authToken=JdAa&amp;amp;authType=name&amp;amp;trk=api*a119686*s128146*&amp;quot;&amp;gt;Kirsten Jones&amp;lt;/a&amp;gt; is reading about &amp;lt;a href=&amp;quot;http://www.tigers.com&amp;quot;&amp;gt;Tigers&amp;lt;/a&amp;gt;http://www.tigers.com&amp;gt;Tigers&amp;lt;/a&amp;gt;..</body>\r\n</activity>",
                                            "schemaContent": "activity-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "The Post Network Update API allows you to send in an activity from your site to be posted to the first degree connections of the LinkedIn user. Network updates are the LinkedIn term for news feed activities and appear on the center column of the home page. Use it when a user on your site performs some activity on your site that they want to broadcast to their connections. For example, you might send a message \"Peter Smith booked a trip to London, England on October 30.\"",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/person-activities",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "person-activities"
                            ]
                        },
                        {
                            "relativeUri": "/shares",
                            "type": {
                                "collection": {
                                    "type": "personShare"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded\n"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "personShare-xml",
                                            "example": "<share>\r\n  <comment>Check out the LinkedIn Share API!</comment>\r\n  <content>\r\n    <title>LinkedIn Developers Documentation On Using the Share API</title>\r\n    <description>Leverage the Share API to maximize engagement on user-generated content on LinkedIn</description>\r\n    <submitted-url>https://developer.linkedin.com/documents/share-api</submitted-url>\r\n    <submitted-image-url>http://m3.licdn.com/media/p/3/000/124/1a6/089a29a.png</submitted-image-url> \r\n  </content>\r\n  <visibility> \r\n    <code>anyone</code> \r\n  </visibility>\r\n</share>",
                                            "schemaContent": "personShare-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Post a share",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/shares",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "shares"
                            ]
                        },
                        {
                            "relativeUri": "/mailbox",
                            "type": {
                                "collection": {
                                    "type": "mailboxItem"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded\n"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "mailboxItem-xml",
                                            "example": "<?xml version='1.0' encoding='UTF-8'?>\r\n<mailbox-item>\r\n  <recipients>\r\n    <recipient>\r\n      <person path='/people/~'/>\r\n    </recipient>\r\n    <recipient>\r\n      <person path=\"/people/abcdefg\" />\r\n    </recipient>\r\n  </recipients>\r\n  <subject>Congratulations on your new position.</subject>\r\n  <body>You're certainly the best person for the job!</body>\r\n</mailbox-item>",
                                            "schemaContent": "mailboxItem-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "This call requires that you identify only the person being invited. The inviter will always come from the access token you use when you make the call. There are two methods of identifying the user being invited:\nMember ID + auth token: If the invitee was found using a search API call, then the search result will have included the member ID and auth token to make the API call. Use both of those to identify the member to invite.\nEmail: For all other cases, you can use email address to identify the member to invite.\n",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/mailbox",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "mailbox"
                            ]
                        },
                        {
                            "relativeUri": "/following/companies",
                            "type": {
                                "collection": {
                                    "type": "company"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "companies-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<companies count=\"10\" start=\"0\">\r\n  <company>\r\n    <id>49648</id>\r\n    <name>Merix Financial</name>\r\n  </company>\r\n  <company>\r\n    <id>118370</id>\r\n    <name>Movaya Wireless</name>\r\n  </company>\r\n  <company>\r\n    <id>119265</id>\r\n    <name>Maison Martin Margiela</name>\r\n  </company>\r\n  <company>\r\n    <id>112571</id>\r\n    <name>CoActive</name>\r\n  </company>\r\n  <company>\r\n    <id>97548</id>\r\n    <name>Actronic</name>\r\n  </company>\r\n  <company>\r\n    <id>1115987</id>\r\n    <name>EELA</name>\r\n  </company>\r\n  <company>\r\n    <id>2204291</id>\r\n    <name>OfftheHookHats.org</name>\r\n  </company>\r\n  <company>\r\n    <id>1973202</id>\r\n    <name>Ministry of Communication and Information Technology</name>\r\n  </company>\r\n  <company>\r\n    <id>2102550</id>\r\n    <name>Lundsbergs skola</name>\r\n  </company>\r\n  <company>\r\n    <id>1086137</id>\r\n    <name>Netsolve Limited</name>\r\n  </company>\r\n</companies>",
                                                    "schemaContent": "companies-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "text/xml": {
                                                    "name": "text/xml"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Retrieve a list of companies a member is following",
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                },
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded\n"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "company-xml",
                                            "example": "<company>\r\n  <id>162479</id>\r\n  <name>Apple</name>\r\n</company>",
                                            "schemaContent": "company-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Start following a company",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/id={id}",
                                    "type": "baseResource",
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "id": {
                                            "name": "id",
                                            "displayName": "id",
                                            "type": "string",
                                            "required": true,
                                            "repeat": false,
                                            "__METADATA__": {
                                                "calculated": true,
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "methods": [
                                        {
                                            "responses": {
                                                "204": {
                                                    "code": "204",
                                                    "description": "Your request to DELETE a record was successful\n"
                                                },
                                                "400": {
                                                    "code": "400",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Your request was not formatted correctly\n"
                                                },
                                                "401": {
                                                    "code": "401",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The OAuth signature was bad\n"
                                                },
                                                "403": {
                                                    "code": "403",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                },
                                                "404": {
                                                    "code": "404",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                },
                                                "405": {
                                                    "code": "405",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                },
                                                "500": {
                                                    "code": "500",
                                                    "body": {
                                                        "text/xml": {
                                                            "name": "text/xml",
                                                            "schema": "error-xml",
                                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                            "schemaContent": "error-xml"
                                                        },
                                                        "application/json": {
                                                            "name": "application/json",
                                                            "schema": "error-schema",
                                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                            "schemaContent": "error-schema"
                                                        }
                                                    },
                                                    "description": "There was an application error on the LinkedIn server.\n"
                                                }
                                            },
                                            "protocols": [
                                                "HTTPS"
                                            ],
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "headers": {
                                                "x-li-format": {
                                                    "name": "x-li-format",
                                                    "displayName": "x-li-format",
                                                    "type": "string",
                                                    "required": false,
                                                    "repeat": false,
                                                    "description": "Type of data\n",
                                                    "enum": [
                                                        "xml",
                                                        "json",
                                                        "jsonp"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "displayName": {
                                                                "calculated": true
                                                            },
                                                            "type": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "required": {
                                                                "insertedAsDefault": true
                                                            },
                                                            "repeat": {
                                                                "insertedAsDefault": true
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "description": "Stop following a company",
                                            "method": "delete",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "protocols": {
                                                        "calculated": true
                                                    },
                                                    "securedBy": {
                                                        "calculated": true
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "displayName": "/id={id}",
                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "id={id}"
                                    ]
                                }
                            ],
                            "displayName": "/following/companies",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "following",
                                "companies"
                            ]
                        }
                    ],
                    "displayName": "/~",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "~"
                    ]
                },
                {
                    "relativeUri": "/url={publicProfileUrl}{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "person"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "publicProfileUrl": {
                            "name": "publicProfileUrl",
                            "displayName": "publicProfileUrl",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "person-xml",
                                            "schemaContent": "person-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "secure-urls": {
                                    "name": "secure-urls",
                                    "displayName": "secure-urls",
                                    "type": "boolean",
                                    "required": false,
                                    "repeat": false,
                                    "description": "secure-urls query parameter indicates that you want the URLs in your response to be HTTPS\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns profile of user by URL\n",
                            "method": "get",
                            "is": [
                                "secureUrlParam"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "Profile API",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "url={publicProfileUrl}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/url={publicProfileUrl}/connections{fieldSelectors}",
                    "type": {
                        "fieldSelectorCollection": {
                            "type": "connection"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "publicProfileUrl": {
                            "name": "publicProfileUrl",
                            "displayName": "publicProfileUrl",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "connections-xml",
                                            "schemaContent": "connections-xml"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "count": {
                                    "name": "count",
                                    "displayName": "count",
                                    "type": "integer",
                                    "required": false,
                                    "default": 10,
                                    "example": "count=10",
                                    "repeat": false,
                                    "description": "Maximum",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "start": {
                                    "name": "start",
                                    "displayName": "start",
                                    "type": "string",
                                    "required": false,
                                    "example": "start=0",
                                    "repeat": false,
                                    "description": "The offset by which to start Network Update pagination",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "modified-since": {
                                    "name": "modified-since",
                                    "displayName": "modified-since",
                                    "type": "integer",
                                    "required": false,
                                    "example": "1267401600000",
                                    "repeat": false,
                                    "description": "Value as a Unix time stamp of milliseconds since epoch.\n",
                                    "minimum": 0,
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "modified": {
                                    "name": "modified",
                                    "displayName": "modified",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Values are updated or new.\n",
                                    "enum": [
                                        "updated",
                                        "new"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns a list of 1st degree connections for a user who has granted access to his/her accoun\n",
                            "method": "get",
                            "is": [
                                "paged",
                                "hasModifiedFilter"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "Connections API",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "url={publicProfileUrl}",
                        "connections{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/id={peopleId}{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "person"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "peopleId": {
                            "name": "peopleId",
                            "displayName": "peopleId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "person-xml",
                                            "schemaContent": "person-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "secure-urls": {
                                    "name": "secure-urls",
                                    "displayName": "secure-urls",
                                    "type": "boolean",
                                    "required": false,
                                    "repeat": false,
                                    "description": "secure-urls query parameter indicates that you want the URLs in your response to be HTTPS\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns profile of user by ID\n",
                            "method": "get",
                            "is": [
                                "secureUrlParam"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "Profile API",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "id={peopleId}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/id={peopleId}/connections{fieldSelectors}",
                    "type": {
                        "fieldSelectorCollection": {
                            "type": "connection"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "peopleId": {
                            "name": "peopleId",
                            "displayName": "peopleId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "connections-xml",
                                            "schemaContent": "connections-xml"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "count": {
                                    "name": "count",
                                    "displayName": "count",
                                    "type": "integer",
                                    "required": false,
                                    "default": 10,
                                    "example": "count=10",
                                    "repeat": false,
                                    "description": "Maximum",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "start": {
                                    "name": "start",
                                    "displayName": "start",
                                    "type": "string",
                                    "required": false,
                                    "example": "start=0",
                                    "repeat": false,
                                    "description": "The offset by which to start Network Update pagination",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "modified-since": {
                                    "name": "modified-since",
                                    "displayName": "modified-since",
                                    "type": "integer",
                                    "required": false,
                                    "example": "1267401600000",
                                    "repeat": false,
                                    "description": "Value as a Unix time stamp of milliseconds since epoch.\n",
                                    "minimum": 0,
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "modified": {
                                    "name": "modified",
                                    "displayName": "modified",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Values are updated or new.\n",
                                    "enum": [
                                        "updated",
                                        "new"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns a list of 1st degree connections for a user who has granted access to his/her accoun\n",
                            "method": "get",
                            "is": [
                                "paged",
                                "hasModifiedFilter"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "Connections API",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "id={peopleId}",
                        "connections{fieldSelectors}"
                    ]
                }
            ],
            "displayName": "/people",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    },
                    "displayName": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "people"
            ]
        },
        {
            "relativeUri": "/people-search{fieldSelectors}",
            "type": {
                "fieldSelectorMember": {
                    "type": "peopleSearch"
                }
            },
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "uriParameters": {
                "fieldSelectors": {
                    "name": "fieldSelectors",
                    "displayName": "Field Selectors",
                    "type": "string",
                    "required": true,
                    "example": ":(id,first-name,last-name,industry)",
                    "repeat": false,
                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "type": {
                                "insertedAsDefault": true
                            },
                            "required": {
                                "insertedAsDefault": true
                            },
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                }
            },
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "peopleSearch-xml",
                                    "schemaContent": "peopleSearch-xml"
                                }
                            }
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "first-name": {
                            "name": "first-name",
                            "displayName": "first-name",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members with a matching first name. Matches must be exact. Multiple words should be separated by a space.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "last-name": {
                            "name": "last-name",
                            "displayName": "last-name",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members with a matching last name. Matches must be exactly. Multiple words should be separated by a space.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "company-name": {
                            "name": "company-name",
                            "displayName": "company-name",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members who have a matching company name on their profile. company-name can be combined with the current-company parameter\nto specifies whether the person is or is not still working at the company.\n\nIt's often valuable to not be too specific with the company name. LinkedIn has made great efforts at standardizing company names,\nbut including suffixes such as \"Inc\" and \"Company\" may overly limit your search, missing people who did not include those suffixes\non their company names. It's usually better to  search for the basic name of the company and all different versions will be returned.\nThis does increase the possibility of a false positive match return, though, so consider the most specific terms you can use.\nFor example, consider using \"Acme\" instead of \"Acme, Inc\" to find people from a company called Acme, Inc. But this runs the risk\nof finding people from different companies with Acme in the title, such as \"Acme Vending\" and \"Acme Services\".\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "current-company": {
                            "name": "current-company",
                            "displayName": "current-company",
                            "type": "boolean",
                            "required": false,
                            "repeat": false,
                            "description": "Valid values are true or false. A value of true matches members who currently work at the company specified in the company-name parameter.\nA value of false matches members who once worked at the company. Omitting the parameter matches members who currently or once worked\nthe company.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "title": {
                            "name": "title",
                            "displayName": "title",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches members with that title on their profile. Works with the current-title parameter.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "current-title": {
                            "name": "current-title",
                            "displayName": "current-title",
                            "type": "boolean",
                            "required": false,
                            "repeat": false,
                            "description": "Valid values are true or false. A value of true matches members whose title is currently the one specified in the title-name parameter.\nA value of false matches members who once had that title. Omitting the parameter matches members who currently or once had that title.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "school-name": {
                            "name": "school-name",
                            "displayName": "school-name",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members who have a matching school name on their profile. school-name can be combined with the current-school parameter to specifies\nwhether the person is or is not still at the school.\n\nIt's often valuable to not be too specific with the school name. The same explation provided with company name applies:\n\"Yale\" vs. \"Yale University\".\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "current-school": {
                            "name": "current-school",
                            "displayName": "current-school",
                            "type": "boolean",
                            "required": false,
                            "repeat": false,
                            "description": "Valid values are true or false. A value of true matches members who currently attend the school specified in the school-name parameter.\nA value of false matches members who once attended the school. Omitting the parameter matches members who currently or once attended\nthe school.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "country-code": {
                            "name": "country-code",
                            "displayName": "country-code",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches members with a location in a specific country. Values are defined in by ISO 3166 standard. Country codes must be in all lower case.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "postal-code": {
                            "name": "postal-code",
                            "displayName": "postal-code",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches members centered around a Postal Code. Must be combined with the country-code parameter. Not supported for all countries.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "distance": {
                            "name": "distance",
                            "displayName": "distance",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches members within a distance from a central point. This is measured in miles. This is best used in combination with both country-code\nand postal-code.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facets": {
                            "name": "facets",
                            "displayName": "facets",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "\"Use facets to discover for a member:          \nWho in their network works at a specific company, or group of companies.\nHow the people their network cluster together. What locations or industries are the most popular?          \nWhere their connections graduated from school.\"\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "count": {
                            "name": "count",
                            "displayName": "count",
                            "type": "integer",
                            "required": false,
                            "default": 10,
                            "example": "count=10",
                            "repeat": false,
                            "description": "Maximum",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "start": {
                            "name": "start",
                            "displayName": "start",
                            "type": "string",
                            "required": false,
                            "example": "start=0",
                            "repeat": false,
                            "description": "The offset by which to start Network Update pagination",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "keywords": {
                            "name": "keywords",
                            "displayName": "keywords",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members who have all the keywords anywhere in their profile. Use this field when you don't know how to\nmore accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facet": {
                            "name": "facet",
                            "displayName": "facet",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Facet values to search over.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "sort": {
                            "name": "sort",
                            "displayName": "sort",
                            "type": "string",
                            "required": false,
                            "default": "connections",
                            "repeat": false,
                            "description": "\"Controls the search result order. There are four options:\nconnections: Number of connections per person, from largest to smallest.\nrecommenders: Number of recommendations per person, from largest to smallest.\ndistance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.\nrelevance: Relevance of results based on the query, from most to least relevant.          \nBy default, results are ordered by the number of connections.\"\n",
                            "enum": [
                                "connections",
                                "recommenders",
                                "distance",
                                "relevance"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Returns information about people\n",
                    "method": "get",
                    "is": [
                        "paged",
                        "filterable"
                    ],
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "displayName": "People Search API",
            "description": "Describes field selectors uri path parameter\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "people-search{fieldSelectors}"
            ]
        },
        {
            "relativeUri": "/groups",
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "resources": [
                {
                    "relativeUri": "/{groupId}{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "group"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "groupId": {
                            "name": "groupId",
                            "displayName": "Numeric group ID",
                            "type": "integer",
                            "required": true,
                            "repeat": false,
                            "description": "The unique identifier for a LinkedIn group\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "group-xml",
                                            "schemaContent": "group-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Returns Group's Profile Details\n",
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{groupId}{fieldSelectors}",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{groupId}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/{groupId}/posts",
                    "type": {
                        "fieldSelectorCollection": {
                            "type": "groupPost"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "groupId": {
                            "name": "groupId",
                            "displayName": "groupId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "groupPosts-xml",
                                            "schemaContent": "groupPosts-xml"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "count": {
                                    "name": "count",
                                    "displayName": "count",
                                    "type": "integer",
                                    "required": false,
                                    "default": 10,
                                    "example": "count=10",
                                    "repeat": false,
                                    "description": "Maximum",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "start": {
                                    "name": "start",
                                    "displayName": "start",
                                    "type": "string",
                                    "required": false,
                                    "example": "start=0",
                                    "repeat": false,
                                    "description": "The offset by which to start Network Update pagination",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "role": {
                                    "name": "role",
                                    "displayName": "role",
                                    "type": "string",
                                    "required": true,
                                    "repeat": false,
                                    "description": "Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.\n",
                                    "enum": [
                                        "creator",
                                        "commenter",
                                        "follower"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "category": {
                                    "name": "category",
                                    "displayName": "category",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Category of posts.\n",
                                    "enum": [
                                        "discussion"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "order": {
                                    "name": "order",
                                    "displayName": "order",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Sort order for posts.\n",
                                    "enum": [
                                        "recency",
                                        "popularity"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                },
                                "modified-since": {
                                    "name": "modified-since",
                                    "displayName": "modified-since",
                                    "type": "integer",
                                    "required": false,
                                    "example": "1302727083000",
                                    "repeat": false,
                                    "description": "Timestamp filter for posts created after the specified value.\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns a Group's Discussion Posts\n",
                            "method": "get",
                            "is": [
                                "paged",
                                "hasRole",
                                "producesPosts"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        },
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Request succeeded\n"
                                },
                                "201": {
                                    "code": "201",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "groupPost-xml",
                                    "schemaContent": "groupPost-xml"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Sharing content with a post is fairly straight forward. Simply make a POST call to the Groups API",
                            "method": "post",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{groupId}/posts",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{groupId}",
                        "posts"
                    ]
                }
            ],
            "displayName": "Groups API",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "groups"
            ]
        },
        {
            "relativeUri": "/posts",
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "resources": [
                {
                    "relativeUri": "/{postId}{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "post"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "postId": {
                            "name": "postId",
                            "displayName": "Post ID",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "description": "The unique identifier for a post\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "post-xml",
                                            "schemaContent": "post-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Returns Discussion Post\n",
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        },
                        {
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Deletes a Post\n",
                            "method": "delete",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{postId}{fieldSelectors}",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{postId}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/{postId}/comments",
                    "type": {
                        "collection": {
                            "type": "comment"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "postId": {
                            "name": "postId",
                            "displayName": "postId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Request succeeded\n"
                                },
                                "201": {
                                    "code": "201",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "body": {
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "comment-xml",
                                    "example": "<comment>\r\n<text>Comment text</text>\r\n</comment>",
                                    "schemaContent": "comment-xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Add a Comment to a Post",
                            "method": "post",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        },
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "comments-xml",
                                            "schemaContent": "comments-xml"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{postId}/comments",
                    "description": "This is base resource type described common request and response headers and error response codes\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{postId}",
                        "comments"
                    ]
                }
            ],
            "displayName": "",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "posts"
            ]
        },
        {
            "relativeUri": "/comments/{commentId}{fieldSelectors}",
            "type": "fieldSelectors",
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "uriParameters": {
                "commentId": {
                    "name": "commentId",
                    "displayName": "Comment ID",
                    "type": "integer",
                    "required": true,
                    "repeat": false,
                    "description": "The unique identifier for a comment\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                },
                "fieldSelectors": {
                    "name": "fieldSelectors",
                    "displayName": "Field Selectors",
                    "type": "string",
                    "required": true,
                    "example": ":(id,first-name,last-name,industry)",
                    "repeat": false,
                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "type": {
                                "insertedAsDefault": true
                            },
                            "required": {
                                "insertedAsDefault": true
                            },
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                }
            },
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Request succeeded  \n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "format": {
                            "name": "format",
                            "displayName": "format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Returns Comments\n",
                    "method": "get",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                },
                {
                    "responses": {
                        "204": {
                            "code": "204",
                            "description": "Your request to DELETE a record was successful\n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Deletes a Comment\n",
                    "method": "delete",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "displayName": "/comments/{commentId}{fieldSelectors}",
            "description": "Describes field selectors uri path parameter\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    },
                    "displayName": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "comments",
                "{commentId}{fieldSelectors}"
            ]
        },
        {
            "relativeUri": "/jobs",
            "type": {
                "collection": {
                    "type": "job"
                }
            },
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Request succeeded\n"
                        },
                        "201": {
                            "code": "201",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "description": "Your request to POST or PUT a record was successful. A Location HTTP header is often returned when we respond with a 201.\n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "402": {
                            "code": "402",
                            "description": "No job inventory available"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "409": {
                            "code": "409",
                            "description": "Duplicate job.Happens when you try to Post a New Job, but another job with the same Partner Job Id already exists. Partner Job Id has to be unique. So either repost with a new Partner Job Id, or edit the existing job.\nJob is closed. Happens when you try to update or renew a job that has already been closed. Renew is not ReOpen. To reopen a closed job, post it again.\nJob is expired. Happens when you try to update a job that has been expired. \nMake a renew call. You can edit and renew a job in the same call.\n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "body": {
                        "application/xml": {
                            "name": "application/xml",
                            "schema": "job-xml",
                            "example": "<job>\r\n  <partner-job-id>LIJ-13239292</partner-job-id>\r\n  <contract-id>1234</contract-id>\r\n  <customer-job-code>DE247X</customer-job-code>\r\n  <company>\r\n    <id>1234</id>\r\n    <name>Company ABC</name>\r\n    <description>A great company</description>\r\n  </company>\r\n  <position>\r\n    <title>Chief Architect</title>\r\n    <description>This is a great job.</description>\r\n    <skills-and-experience>Programming, financial analysis, and  thought leadership.</skills-and-experience>\r\n    <location>\r\n     <country>\r\n       <code>us</code>\r\n      </country>\r\n      <postal-code>10012</postal-code>\r\n      <name>Midtown Manhattan</name>\r\n    </location>\r\n    <job-functions>\r\n      <job-function>\r\n        <code>acct</code>\r\n      </job-function>\r\n            <job-function>\r\n              <code>dsgn</code>\r\n            </job-function>\r\n        </job-functions>\r\n    <industries>\r\n      <industry>\r\n        <code>38</code>\r\n      </industry>\r\n      <industry>\r\n        <code>44</code>\r\n      </industry>\r\n    </industries>\r\n    <job-type>\r\n      <code>C</code>\r\n    </job-type>\r\n    <experience-level>\r\n      <code>4</code>\r\n    </experience-level>\r\n  </position>\r\n  <salary>$100,000-120,000 per year</salary>\r\n  <referral-bonus>$5,000 for employees</referral-bonus>\r\n  <poster>\r\n    <display>true</display>\r\n    <role>\r\n      <code>R</code>\r\n    </role>\r\n        <email-address>user@contract.com</email-address>\r\n  </poster>\r\n  <how-to-apply>\r\n    <application-url>http://www.linkedin.com</application-url>\r\n  </how-to-apply>\r\n  <tracking-pixel-url>http://www.linkedin.com/track.gif</tracking-pixel-url>\r\n</job>",
                            "schemaContent": "job-xml"
                        },
                        "application/json": {
                            "name": "application/json"
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "headers": {
                        "Content-Type": {
                            "name": "Content-Type",
                            "displayName": "Content-Type",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "enum": [
                                "text/xml"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Post a job",
                    "method": "post",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "resources": [
                {
                    "relativeUri": "/{jobId}{fieldSelectors}",
                    "type": {
                        "fieldSelectorMember": {
                            "type": "jobGet"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "jobId": {
                            "name": "jobId",
                            "displayName": "Job ID",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "description": "The unique identifier for a job.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "Field Selectors",
                            "type": "string",
                            "required": true,
                            "example": ":(id,first-name,last-name,industry)",
                            "repeat": false,
                            "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "jobGet-xml",
                                            "schemaContent": "jobGet-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Returns Job info\n",
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{jobId}{fieldSelectors}",
                    "description": "Describes field selectors uri path parameter\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{jobId}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/partner-job-id={partnerJobId}",
                    "type": {
                        "member": {
                            "type": "jobUpdate"
                        }
                    },
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "partnerJobId": {
                            "name": "partnerJobId",
                            "displayName": "partnerJobId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "description": "Unique ID for the job created by the partner (must be unique for each job posted).",
                            "maxLength": 50,
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200"
                                }
                            },
                            "body": {
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "jobUpdate-xml",
                                    "example": "<job>\r\n  <position> \r\n    <description>This is a great job.</description>\r\n  </position>\r\n  <compensation>\r\n    <salary>\r\n      <description>$100k per year + benefits</description>\r\n    </salary>\r\n  </compensation>\r\n</job>",
                                    "schemaContent": "jobUpdate-xml"
                                },
                                "application/json": {
                                    "name": "application/json"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Edit or renew a job",
                            "method": "put",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        },
                        {
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "description": "Close calls should not include XML; only the URL is required.\nAn HTTP DELETE must be used to close a job.\n",
                            "method": "delete",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        },
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/json": {
                                            "name": "application/json"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "jobUpdate-xml",
                                            "schemaContent": "jobUpdate-xml"
                                        }
                                    }
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/partner-job-id={partnerJobId}",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "partner-job-id={partnerJobId}"
                    ]
                }
            ],
            "displayName": "Job Lookup API",
            "description": "This is base resource type described common request and response headers and error response codes\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "jobs"
            ]
        },
        {
            "relativeUri": "/job-search{fieldSelectors}",
            "type": {
                "fieldSelectorMember": {
                    "type": "jobSearch"
                }
            },
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "uriParameters": {
                "fieldSelectors": {
                    "name": "fieldSelectors",
                    "displayName": "Field Selectors",
                    "type": "string",
                    "required": true,
                    "example": ":(id,first-name,last-name,industry)",
                    "repeat": false,
                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "type": {
                                "insertedAsDefault": true
                            },
                            "required": {
                                "insertedAsDefault": true
                            },
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                }
            },
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "jobSearch-xml",
                                    "schemaContent": "jobSearch-xml"
                                }
                            }
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "distance": {
                            "name": "distance",
                            "displayName": "distance",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches jobs within a distance from a central point. This is measured in miles. This is best used in combination with both country-code and postal-code.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "postal-code": {
                            "name": "postal-code",
                            "displayName": "postal-code",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches jobs centered around a Postal Code. Must be combined with the country-code parameter. Not supported for all countries.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "country-code": {
                            "name": "country-code",
                            "displayName": "country-code",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches jobs with a location in a specific country. Values are defined in by ISO 3166 standard. Country codes must be in all lower case.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "job-title": {
                            "name": "job-title",
                            "displayName": "job-title",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matches jobs with the same job title.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "company-name": {
                            "name": "company-name",
                            "displayName": "company-name",
                            "type": "string",
                            "required": false,
                            "example": "Acme Vending",
                            "repeat": false,
                            "description": "Jobs with a matching company name. It's often valuable to not be too specific with the company name. LinkedIn has made great efforts at standardizing company names, but including suffixes such as \"Inc\" and \"Company\" may overly limit your search, missing people who did not include those suffixes on their company names. It's usually better to  search for the basic name of the company and all different versions will be returned. This does increase the possibility of a false positive match return, though, so consider the most specific terms you can use. For example, consider using \"Acme\" instead of \"Acme, Inc\" to find people from a company called Acme, Inc. But this runs the risk of finding people from different companies with Acme in the title, such as \"Acme Vending\" and \"Acme Services\".\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facets": {
                            "name": "facets",
                            "displayName": "facets",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "|Parameter| Definition| Values|\n|---|---|---|\n|company|The job postings by company.|| \n|date-posted|The job postings by the date posted.|Format: YearMonthDay (e.g. 20121031)|\n|location|A geographical region. This is not necessarily a country. It could be a city or regional area, such as San Francisco Bay Area.|A geographical code, such as us:84 for San Francisco Bay Area or fr:0 for France.|\n|job-function|The job postings by job function.|| \n|industry|An industry field.|Industry values are listed on a separate page.|\n|salary|The job postings based on salary.||\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "count": {
                            "name": "count",
                            "displayName": "count",
                            "type": "integer",
                            "required": false,
                            "default": 10,
                            "example": "count=10",
                            "repeat": false,
                            "description": "Maximum",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "start": {
                            "name": "start",
                            "displayName": "start",
                            "type": "string",
                            "required": false,
                            "example": "start=0",
                            "repeat": false,
                            "description": "The offset by which to start Network Update pagination",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "keywords": {
                            "name": "keywords",
                            "displayName": "keywords",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members who have all the keywords anywhere in their profile. Use this field when you don't know how to\nmore accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facet": {
                            "name": "facet",
                            "displayName": "facet",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Facet values to search over.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "sort": {
                            "name": "sort",
                            "displayName": "sort",
                            "type": "string",
                            "required": false,
                            "default": "connections",
                            "repeat": false,
                            "description": "\"Controls the search result order. There are four options:\nconnections: Number of connections per person, from largest to smallest.\nrecommenders: Number of recommendations per person, from largest to smallest.\ndistance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.\nrelevance: Relevance of results based on the query, from most to least relevant.          \nBy default, results are ordered by the number of connections.\"\n",
                            "enum": [
                                "connections",
                                "recommenders",
                                "distance",
                                "relevance"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Returns Jobs found by some criteria\n",
                    "method": "get",
                    "is": [
                        "paged",
                        "filterable"
                    ],
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "displayName": "Job Search API",
            "description": "Describes field selectors uri path parameter\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "job-search{fieldSelectors}"
            ]
        },
        {
            "relativeUri": "/companies{fieldSelectors}",
            "type": {
                "fieldSelectorCollection": {
                    "type": "company"
                }
            },
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "uriParameters": {
                "fieldSelectors": {
                    "name": "fieldSelectors",
                    "displayName": "Field Selectors",
                    "type": "string",
                    "required": true,
                    "example": ":(id,first-name,last-name,industry)",
                    "repeat": false,
                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "type": {
                                "insertedAsDefault": true
                            },
                            "required": {
                                "insertedAsDefault": true
                            },
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                }
            },
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "companies-xml",
                                    "schemaContent": "companies-xml"
                                },
                                "text/xml": {
                                    "name": "text/xml"
                                }
                            },
                            "description": "Request succeeded  \n"
                        },
                        "400": {
                            "code": "400",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Your request was not formatted correctly\n"
                        },
                        "401": {
                            "code": "401",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The OAuth signature was bad\n"
                        },
                        "403": {
                            "code": "403",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                        },
                        "404": {
                            "code": "404",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                        },
                        "405": {
                            "code": "405",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                        },
                        "500": {
                            "code": "500",
                            "body": {
                                "text/xml": {
                                    "name": "text/xml",
                                    "schema": "error-xml",
                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                    "schemaContent": "error-xml"
                                },
                                "application/json": {
                                    "name": "application/json",
                                    "schema": "error-schema",
                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                    "schemaContent": "error-schema"
                                }
                            },
                            "description": "There was an application error on the LinkedIn server.\n"
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "is-company-admin": {
                            "name": "is-company-admin",
                            "displayName": "is-company-admin",
                            "type": "boolean",
                            "required": false,
                            "example": "is-company-admin=true",
                            "repeat": false,
                            "description": "The authenticated user is an administrator",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "email-domains": {
                            "name": "email-domains",
                            "displayName": "email-domains",
                            "type": "string",
                            "required": false,
                            "example": "email-domain=apple.com",
                            "repeat": false,
                            "description": "Company email domains.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "format": {
                            "name": "format",
                            "displayName": "format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "count": {
                            "name": "count",
                            "displayName": "count",
                            "type": "integer",
                            "required": false,
                            "default": 10,
                            "example": "count=10",
                            "repeat": false,
                            "description": "Maximum",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "start": {
                            "name": "start",
                            "displayName": "start",
                            "type": "string",
                            "required": false,
                            "example": "start=0",
                            "repeat": false,
                            "description": "The offset by which to start Network Update pagination",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "headers": {
                        "x-li-format": {
                            "name": "x-li-format",
                            "displayName": "x-li-format",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Type of data\n",
                            "enum": [
                                "xml",
                                "json",
                                "jsonp"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "method": "get",
                    "is": [
                        "paged"
                    ],
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "displayName": "/companies{fieldSelectors}",
            "description": "Describes field selectors uri path parameter\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    },
                    "displayName": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "companies{fieldSelectors}"
            ]
        },
        {
            "relativeUri": "/companies",
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "resources": [
                {
                    "relativeUri": "/{companyId}{fieldSelectors}",
                    "type": "baseResource",
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "companyId": {
                            "name": "companyId",
                            "displayName": "companyId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "description": "The unique internal numeric company identifier.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "fieldSelectors": {
                            "name": "fieldSelectors",
                            "displayName": "fieldSelectors",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "__METADATA__": {
                                "calculated": true,
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "company-about-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<company>\r\n  <id>1337</id>\r\n  <universal-name>linkedin</universal-name>\r\n  <name>LinkedIn</name>\r\n  <ticker>LNKD</ticker>\r\n  <logo-url>http://media.linkedin.com/mpr/mpr/p/2/000/072/3f9/35d2127.png</logo-url>\r\n  <description>LinkedIn takes your professional network online, giving you access to people, jobs and opportunities like never before. Built upon trusted connections and relationships, LinkedIn has established the worldÕs largest and most powerful professional network. Currently, more than 200 million professionals are on LinkedIn, including executives from all five hundred of the Fortune 500 companies, as well as a wide range of household names in technology, financial services, media, consumer packaged goods, entertainment, and numerous other industries. LinkedIn is backed by world-class investors including Sequoia Capital, Greylock, the European Founders Fund, Bessemer Venture Partners, Bain Capital, Goldman Sachs, SAP Ventures, and The McGraw-Hill Companies</description>\r\n  <company-type>\r\n    <code>P</code>\r\n    <name>Privately Held</name>\r\n  </company-type>\r\n  <industries total=\"1\">\r\n    <industry>\r\n      <code>6</code>\r\n      <name>Internet</name>\r\n    </industry>\r\n  </industries>\r\n  <size>501-1000</size>\r\n  <specialties total=\"8\">\r\n    <specialty>Online Professional Network</specialty>\r\n    <specialty>Jobs</specialty>\r\n    <specialty>People Search</specialty>\r\n    <specialty>Company Search</specialty>\r\n    <specialty>Address Book</specialty>\r\n    <specialty>Advertising</specialty>\r\n    <specialty>Professional Identity</specialty>\r\n    <specialty>Group Collaboration</specialty>\r\n  </specialties>\r\n  <blog-rss-url>http://feeds.feedburner.com/LinkedInBlog</blog-rss-url>\r\n  <twitter-id>linkedin</twitter-id>\r\n  <square-logo-url>http://media.linkedin.com/mpr/mpr/p/3/000/072/3db/1283f2d.png</square-logo-url>\r\n  <locations total=\"15\">\r\n    <location>\r\n      <address>\r\n        <street1>2029 Stierlin Court</street1>\r\n        <city>Mountain View</city>\r\n        <postal-code>94043</postal-code>\r\n      </address>\r\n      <contact-info>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>2126 N 117th Ave</street1>\r\n        <city>Omaha</city>\r\n        <postal-code>68164</postal-code>\r\n      </address>\r\n      <contact-info>\r\n        <phone1>(402) 452-2320</phone1>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>15 Shady Brook Lane</street1>\r\n        <city>Belmont</city>\r\n        <postal-code>02478</postal-code>\r\n      </address>\r\n      <contact-info>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>2126 N 117th Ave</street1>\r\n        <city>Omaha</city>\r\n        <postal-code>68164</postal-code>\r\n      </address>\r\n      <contact-info>\r\n        <phone1>(402) 452-2320</phone1>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>2029 Stierlin Court</street1>\r\n        <city>Mountain View</city>\r\n        <postal-code>94043</postal-code>\r\n      </address>\r\n      <contact-info>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>2029 Stierlin Court</street1>\r\n        <city>Mountain View</city>\r\n        <postal-code>94043</postal-code>\r\n      </address>\r\n      <contact-info>\r\n      </contact-info>\r\n    </location>\r\n    <location>\r\n      <address>\r\n        <street1>30 S. Wacker Drive</street1>\r\n        <city>Chicago</city>\r\n        <postal-code>60606</postal-code>\r\n      </address>\r\n      <contact-info>\r\n      </contact-info>\r\n    </location>\r\n  </locations>\r\n  <founded-year>2003</founded-year>\r\n  <email-domains total=\"1\">\r\n    <email-domain>linkedin.com</email-domain>\r\n  </email-domains>\r\n  <website-url>http://www.linkedin.com</website-url>\r\n  <status>\r\n   <code>OPR</code>\r\n   <name>Operating</name>\r\n  </status>\r\n  <employee-count-range>\r\n    <code>F</code>\r\n    <name>501-1000</name>\r\n  </employee-count-range>\r\n</company>",
                                            "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:short\" name=\"id\"/>\r\n        <xs:element type=\"xs:string\" name=\"universal-name\"/>\r\n        <xs:element type=\"xs:string\" name=\"name\"/>\r\n        <xs:element type=\"xs:string\" name=\"ticker\"/>\r\n        <xs:element type=\"xs:anyURI\" name=\"logo-url\"/>\r\n        <xs:element type=\"xs:string\" name=\"description\"/>\r\n        <xs:element name=\"company-type\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"industries\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"industry\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element type=\"xs:byte\" name=\"code\"/>\r\n                    <xs:element type=\"xs:string\" name=\"name\"/>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:string\" name=\"size\"/>\r\n        <xs:element name=\"specialties\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"specialty\" maxOccurs=\"unbounded\" minOccurs=\"0\"/>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:anyURI\" name=\"blog-rss-url\"/>\r\n        <xs:element type=\"xs:string\" name=\"twitter-id\"/>\r\n        <xs:element type=\"xs:anyURI\" name=\"square-logo-url\"/>\r\n        <xs:element name=\"locations\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element name=\"location\" maxOccurs=\"unbounded\" minOccurs=\"0\">\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:element name=\"address\">\r\n                      <xs:complexType>\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"street1\"/>\r\n                          <xs:element type=\"xs:string\" name=\"city\"/>\r\n                          <xs:element type=\"xs:int\" name=\"postal-code\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                    <xs:element name=\"contact-info\">\r\n                      <xs:complexType mixed=\"true\">\r\n                        <xs:sequence>\r\n                          <xs:element type=\"xs:string\" name=\"phone1\" minOccurs=\"0\"/>\r\n                        </xs:sequence>\r\n                      </xs:complexType>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:short\" name=\"founded-year\"/>\r\n        <xs:element name=\"email-domains\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"email-domain\"/>\r\n            </xs:sequence>\r\n            <xs:attribute type=\"xs:byte\" name=\"total\"/>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element type=\"xs:anyURI\" name=\"website-url\"/>\r\n        <xs:element name=\"status\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n        <xs:element name=\"employee-count-range\">\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:element type=\"xs:string\" name=\"code\"/>\r\n              <xs:element type=\"xs:string\" name=\"name\"/>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns a single company if found.",
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/{companyId}{fieldSelectors}",
                    "description": "This is base resource type described common request and response headers and error response codes\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{companyId}{fieldSelectors}"
                    ]
                },
                {
                    "relativeUri": "/{companyId}",
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "companyId": {
                            "name": "companyId",
                            "displayName": "companyId",
                            "type": "string",
                            "required": true,
                            "repeat": false,
                            "description": "The unique internal numeric company identifier.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "resources": [
                        {
                            "relativeUri": "/updates",
                            "type": {
                                "member": {
                                    "type": "update"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "update-xml",
                                                    "example": "<update>\r\n   <timestamp>1315338683355</timestamp>\r\n   <update-type>CMPY</update-type>\r\n   <update-content>\r\n      <company>\r\n         <id>1337</id>\r\n         <name>LinkedIn</name>\r\n      </company>\r\n      <company-person-update>\r\n          <person>\r\n              <id>14381178</id>\r\n                  <first-name>Patrick</first-name>\r\n                  <last-name>Smith</last-name>\r\n                  <headline>Enterprise Relationship Manager at LinkedIn</headline>\r\n                  <picture-url>http://media.linkedin.com/mpr/mprx/0_gPLYkP6SpokSOnUc0-vDkA9DYulmpzUc0tA3krFxTW5YiluBAvztoKPlKGAlx-sRyKF8wBMg5HkD</picture-url>\r\n                  <api-standard-profile-request>\r\n                      <url>http://api.linkedin.com/v1/people/14381178</url>\r\n                      <headers total=\"1\">\r\n                           <http-header>\r\n                              <name>x-li-auth-token</name>\r\n                              <value>name:4gRT</value>\r\n                           </http-header>\r\n                      </headers>\r\n                  </api-standard-profile-request>\r\n                  <site-standard-profile-request>\r\n                        <url>http://www.linkedin.com/profile?viewProfile=&amp;key=14381178&amp;authToken=4gRT&amp;authType=name&amp;trk=api*</url>\r\n                  </site-standard-profile-request>\r\n             </person>\r\n             <action>\r\n                <code>joined</code>\r\n             </action>\r\n             <old-position>\r\n                  <title>Actor</title>\r\n                  <company>\r\n                       <name>IndependentContractor</name>\r\n                  </company>\r\n             </old-position>\r\n             <new-position>\r\n                  <title>Enterprise Relationship Manager</title>\r\n                  <company>\r\n                       <id>1337</id>\r\n                       <name>LinkedIn</name>\r\n                  </company>\r\n             </new-position>\r\n         </company-person-update>\r\n     </update-content>\r\n</update>",
                                                    "schemaContent": "update-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            }
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "event-type": {
                                            "name": "event-type",
                                            "displayName": "event-type",
                                            "type": "string",
                                            "required": false,
                                            "example": "event-type=status-update",
                                            "repeat": false,
                                            "description": "Any valid Company Update Type from the table below.",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "count": {
                                            "name": "count",
                                            "displayName": "count",
                                            "type": "integer",
                                            "required": false,
                                            "default": 10,
                                            "example": "count=10",
                                            "repeat": false,
                                            "description": "Maximum",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "start": {
                                            "name": "start",
                                            "displayName": "start",
                                            "type": "string",
                                            "required": false,
                                            "example": "start=0",
                                            "repeat": false,
                                            "description": "The offset by which to start Network Update pagination",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "To retrieve the company's updates",
                                    "method": "get",
                                    "is": [
                                        "paged"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "resources": [
                                {
                                    "relativeUri": "/key={CompanyUpdateKey}",
                                    "type": "baseResource",
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "uriParameters": {
                                        "CompanyUpdateKey": {
                                            "name": "CompanyUpdateKey",
                                            "displayName": "CompanyUpdateKey",
                                            "type": "string",
                                            "required": true,
                                            "repeat": false,
                                            "__METADATA__": {
                                                "calculated": true,
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "resources": [
                                        {
                                            "relativeUri": "/update-comments",
                                            "type": "baseResource",
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "methods": [
                                                {
                                                    "responses": {
                                                        "200": {
                                                            "code": "200",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json"
                                                                }
                                                            },
                                                            "description": "Request succeeded  \n"
                                                        },
                                                        "400": {
                                                            "code": "400",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Your request was not formatted correctly\n"
                                                        },
                                                        "401": {
                                                            "code": "401",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The OAuth signature was bad\n"
                                                        },
                                                        "403": {
                                                            "code": "403",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                        },
                                                        "404": {
                                                            "code": "404",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                        },
                                                        "405": {
                                                            "code": "405",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                        },
                                                        "500": {
                                                            "code": "500",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "There was an application error on the LinkedIn server.\n"
                                                        }
                                                    },
                                                    "protocols": [
                                                        "HTTPS"
                                                    ],
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "queryParameters": {
                                                        "event-type": {
                                                            "name": "event-type",
                                                            "displayName": "event-type",
                                                            "type": "string",
                                                            "required": false,
                                                            "example": "event-type=status-update",
                                                            "repeat": false,
                                                            "description": "Any valid Company Update Type from the table below.",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "format": {
                                                            "name": "format",
                                                            "displayName": "format",
                                                            "type": "string",
                                                            "required": false,
                                                            "repeat": false,
                                                            "description": "Type of data\n",
                                                            "enum": [
                                                                "xml",
                                                                "json",
                                                                "jsonp"
                                                            ],
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "count": {
                                                            "name": "count",
                                                            "displayName": "count",
                                                            "type": "integer",
                                                            "required": false,
                                                            "default": 10,
                                                            "example": "count=10",
                                                            "repeat": false,
                                                            "description": "Maximum",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "start": {
                                                            "name": "start",
                                                            "displayName": "start",
                                                            "type": "string",
                                                            "required": false,
                                                            "example": "start=0",
                                                            "repeat": false,
                                                            "description": "The offset by which to start Network Update pagination",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "headers": {
                                                        "x-li-format": {
                                                            "name": "x-li-format",
                                                            "displayName": "x-li-format",
                                                            "type": "string",
                                                            "required": false,
                                                            "repeat": false,
                                                            "description": "Type of data\n",
                                                            "enum": [
                                                                "xml",
                                                                "json",
                                                                "jsonp"
                                                            ],
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "method": "get",
                                                    "is": [
                                                        "paged"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "protocols": {
                                                                "calculated": true
                                                            },
                                                            "securedBy": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    }
                                                }
                                            ],
                                            "displayName": "/update-comments",
                                            "description": "This is base resource type described common request and response headers and error response codes\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "securedBy": {
                                                        "calculated": true
                                                    },
                                                    "displayName": {
                                                        "calculated": true
                                                    }
                                                }
                                            },
                                            "relativeUriPathSegments": [
                                                "update-comments"
                                            ]
                                        },
                                        {
                                            "relativeUri": "/likes",
                                            "type": "baseResource",
                                            "securedBy": [
                                                "oauth_2_0",
                                                "oauth_1_0"
                                            ],
                                            "methods": [
                                                {
                                                    "responses": {
                                                        "200": {
                                                            "code": "200",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json"
                                                                }
                                                            },
                                                            "description": "Request succeeded  \n"
                                                        },
                                                        "400": {
                                                            "code": "400",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Your request was not formatted correctly\n"
                                                        },
                                                        "401": {
                                                            "code": "401",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The OAuth signature was bad\n"
                                                        },
                                                        "403": {
                                                            "code": "403",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                                        },
                                                        "404": {
                                                            "code": "404",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                                        },
                                                        "405": {
                                                            "code": "405",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                                        },
                                                        "500": {
                                                            "code": "500",
                                                            "body": {
                                                                "text/xml": {
                                                                    "name": "text/xml",
                                                                    "schema": "error-xml",
                                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                                    "schemaContent": "error-xml"
                                                                },
                                                                "application/json": {
                                                                    "name": "application/json",
                                                                    "schema": "error-schema",
                                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                                    "schemaContent": "error-schema"
                                                                }
                                                            },
                                                            "description": "There was an application error on the LinkedIn server.\n"
                                                        }
                                                    },
                                                    "protocols": [
                                                        "HTTPS"
                                                    ],
                                                    "securedBy": [
                                                        "oauth_2_0",
                                                        "oauth_1_0"
                                                    ],
                                                    "queryParameters": {
                                                        "event-type": {
                                                            "name": "event-type",
                                                            "displayName": "event-type",
                                                            "type": "string",
                                                            "required": false,
                                                            "example": "event-type=status-update",
                                                            "repeat": false,
                                                            "description": "Any valid Company Update Type from the table below.",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "format": {
                                                            "name": "format",
                                                            "displayName": "format",
                                                            "type": "string",
                                                            "required": false,
                                                            "repeat": false,
                                                            "description": "Type of data\n",
                                                            "enum": [
                                                                "xml",
                                                                "json",
                                                                "jsonp"
                                                            ],
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "count": {
                                                            "name": "count",
                                                            "displayName": "count",
                                                            "type": "integer",
                                                            "required": false,
                                                            "default": 10,
                                                            "example": "count=10",
                                                            "repeat": false,
                                                            "description": "Maximum",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "start": {
                                                            "name": "start",
                                                            "displayName": "start",
                                                            "type": "string",
                                                            "required": false,
                                                            "example": "start=0",
                                                            "repeat": false,
                                                            "description": "The offset by which to start Network Update pagination",
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "headers": {
                                                        "x-li-format": {
                                                            "name": "x-li-format",
                                                            "displayName": "x-li-format",
                                                            "type": "string",
                                                            "required": false,
                                                            "repeat": false,
                                                            "description": "Type of data\n",
                                                            "enum": [
                                                                "xml",
                                                                "json",
                                                                "jsonp"
                                                            ],
                                                            "__METADATA__": {
                                                                "primitiveValuesMeta": {
                                                                    "displayName": {
                                                                        "calculated": true
                                                                    },
                                                                    "type": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "required": {
                                                                        "insertedAsDefault": true
                                                                    },
                                                                    "repeat": {
                                                                        "insertedAsDefault": true
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "method": "get",
                                                    "is": [
                                                        "paged"
                                                    ],
                                                    "__METADATA__": {
                                                        "primitiveValuesMeta": {
                                                            "protocols": {
                                                                "calculated": true
                                                            },
                                                            "securedBy": {
                                                                "calculated": true
                                                            }
                                                        }
                                                    }
                                                }
                                            ],
                                            "displayName": "/likes",
                                            "description": "This is base resource type described common request and response headers and error response codes\n",
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "securedBy": {
                                                        "calculated": true
                                                    },
                                                    "displayName": {
                                                        "calculated": true
                                                    }
                                                }
                                            },
                                            "relativeUriPathSegments": [
                                                "likes"
                                            ]
                                        }
                                    ],
                                    "displayName": "/key={CompanyUpdateKey}",
                                    "description": "This is base resource type described common request and response headers and error response codes\n",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "securedBy": {
                                                "calculated": true
                                            },
                                            "displayName": {
                                                "calculated": true
                                            }
                                        }
                                    },
                                    "relativeUriPathSegments": [
                                        "key={CompanyUpdateKey}"
                                    ]
                                }
                            ],
                            "displayName": "/updates",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "updates"
                            ]
                        },
                        {
                            "relativeUri": "/shares",
                            "type": {
                                "collection": {
                                    "type": "companyShare"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded\n"
                                        },
                                        "201": {
                                            "code": "201",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Created on success"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "body": {
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "companyShare",
                                            "example": "{\r\n  \"visibility\" : {\r\n    \"code\" : \"anyone\"\r\n  } ,\r\n  \"comment\" : \"Testing a full company share!\" ,\r\n  \"content\" : {\r\n    \"submitted-url\" : \"http://www.example.com/content.html\" ,\r\n    \"title\" : \"Test Share with Content\" ,\r\n    \"description\" : \"content description\" ,\r\n    \"submitted‐image-url\" : \"http://www.example.com/image.jpg\"\r\n  }\r\n}",
                                            "schemaContent": "{\r\n  \"required\" : true ,\r\n  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,\r\n  \"type\" : \"object\" ,\r\n  \"properties\" : {\r\n    \"visibility\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"code\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    } ,\r\n    \"comment\" : {\r\n      \"type\" : \"string\" ,\r\n      \"required\" : false\r\n    } ,\r\n    \"content\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"submitted-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"title\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"description\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"submitted‐image-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                        },
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "companyShare-xml",
                                            "example": "<share>\r\n  <visibility>\r\n  <code>anyone</code>\r\n  </visibility>\r\n  <comment>Testing a targeted share!</comment>\r\n  <content>\r\n    <submitted-url>http://www.example.com/content.html</submitted-url>\r\n    <title>Test Share with Content</title>\r\n    <description>content description</description>\r\n    <submitted-image-url>http://www.example.com/image.jpg</submitted-image-url>\r\n  </content>\r\n  <share-target-reach>\r\n    <share-targets>\r\n      <share-target>\r\n        <code>geos</code>\r\n        <tvalues>\r\n          <tvalue>as</tvalue>\r\n        </tvalues>\r\n      </share-target>\r\n      <share-target>\r\n        <code>jobFunc</code>\r\n        <tvalues>\r\n          <tvalue>acct</tvalue>\r\n        </tvalues>\r\n      </share-target>\r\n    </share-targets>\r\n  </share-target-reach>\r\n</share>",
                                            "schemaContent": "companyShare-xml"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Full company share with content",
                                    "method": "post",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/shares",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "shares"
                            ]
                        },
                        {
                            "relativeUri": "/is-company-share-enabled",
                            "type": "baseResource",
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/is-company-share-enabled",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "is-company-share-enabled"
                            ]
                        },
                        {
                            "relativeUri": "/relation-to-viewer/is-company-share-enabled",
                            "type": "baseResource",
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/relation-to-viewer/is-company-share-enabled",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "relation-to-viewer",
                                "is-company-share-enabled"
                            ]
                        },
                        {
                            "relativeUri": "/num-followers",
                            "type": {
                                "member": {
                                    "type": "companyShare"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "companyShare",
                                                    "example": "{\r\n  \"visibility\" : {\r\n    \"code\" : \"anyone\"\r\n  } ,\r\n  \"comment\" : \"Testing a full company share!\" ,\r\n  \"content\" : {\r\n    \"submitted-url\" : \"http://www.example.com/content.html\" ,\r\n    \"title\" : \"Test Share with Content\" ,\r\n    \"description\" : \"content description\" ,\r\n    \"submitted‐image-url\" : \"http://www.example.com/image.jpg\"\r\n  }\r\n}",
                                                    "schemaContent": "{\r\n  \"required\" : true ,\r\n  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,\r\n  \"type\" : \"object\" ,\r\n  \"properties\" : {\r\n    \"visibility\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"code\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    } ,\r\n    \"comment\" : {\r\n      \"type\" : \"string\" ,\r\n      \"required\" : false\r\n    } ,\r\n    \"content\" : {\r\n      \"type\" : \"object\" ,\r\n      \"required\" : false ,\r\n      \"properties\" : {\r\n        \"submitted-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"title\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"description\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        } ,\r\n        \"submitted‐image-url\" : {\r\n          \"type\" : \"string\" ,\r\n          \"required\" : false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                                },
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "companyShare-xml",
                                                    "schemaContent": "companyShare-xml"
                                                }
                                            }
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "geographies": {
                                            "name": "geographies",
                                            "displayName": "geographies",
                                            "type": "string",
                                            "required": false,
                                            "example": "af.eg",
                                            "repeat": false,
                                            "description": "See geographies for the valid values.",
                                            "maxLength": 10,
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "jobFunc": {
                                            "name": "jobFunc",
                                            "displayName": "jobFunc",
                                            "type": "string",
                                            "required": false,
                                            "example": "jobFunc=it",
                                            "repeat": false,
                                            "description": "See job functions for the valid values.",
                                            "maxLength": 10,
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "industries": {
                                            "name": "industries",
                                            "displayName": "industries",
                                            "type": "string",
                                            "required": false,
                                            "example": "47",
                                            "repeat": false,
                                            "description": "See industry codes for the valid values.",
                                            "maxLength": 10,
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "seniorities": {
                                            "name": "seniorities",
                                            "displayName": "seniorities",
                                            "type": "string",
                                            "required": false,
                                            "example": "c",
                                            "repeat": false,
                                            "description": "Specify the level of seniority to target.",
                                            "enum": [
                                                "d",
                                                "c",
                                                "en",
                                                "ic",
                                                "m",
                                                "o",
                                                "p",
                                                "tr",
                                                "up",
                                                "vp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        },
                                        "companySizes": {
                                            "name": "companySizes",
                                            "displayName": "companySizes",
                                            "type": "string",
                                            "required": false,
                                            "example": "self",
                                            "repeat": false,
                                            "description": "Specify the size range for the company.",
                                            "enum": [
                                                "self",
                                                "1-10",
                                                "11-50",
                                                "51-200",
                                                "201-500",
                                                "501-1000",
                                                "1001-5000",
                                                "5001-10000",
                                                "10001"
                                            ],
                                            "maxLength": 10,
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/num-followers",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "num-followers"
                            ]
                        },
                        {
                            "relativeUri": "/company-statistics",
                            "type": {
                                "collection": {
                                    "type": "companyStatistic"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "companyStatistics-xml",
                                                    "example": "<company-statistics>\r\n  <status-update-statistics>\r\n    <views-by-month total=\"12\">\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>11</month>\r\n        </date>\r\n        <clicks>1</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>150</impressions>\r\n        <engagement>0.006666666666666667</engagement>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>10</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>1</likes>\r\n        <comments>1</comments>\r\n        <shares>0</shares>\r\n        <impressions>654</impressions>\r\n        <engagement>0.0030581039755351682</engagement>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>9</month>\r\n        </date>\r\n        <clicks>1</clicks>\r\n        <likes>3</likes>\r\n        <comments>2</comments>\r\n        <shares>0</shares>\r\n        <impressions>4463</impressions>\r\n        <engagement>0.0013443871835088505</engagement>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>8</month>\r\n        </date>\r\n        <clicks>15</clicks>\r\n        <likes>16</likes>\r\n        <comments>71</comments>\r\n        <shares>1</shares>\r\n        <impressions>7106</impressions>\r\n        <engagement>0.01449479313256403</engagement>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>7</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>6</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>5</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>4</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>3</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>2</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2012</year>\r\n          <month>1</month>\r\n        </date>\r\n        <clicks>0</clicks>\r\n        <likes>0</likes>\r\n        <comments>0</comments>\r\n        <shares>0</shares>\r\n        <impressions>0</impressions>\r\n      </view-by-month>\r\n      <view-by-month>\r\n        <date>\r\n          <year>2011</year>\r\n          <month>12</month>\r\n        </date>\r\n      </view-by-month>\r\n    </views-by-month>\r\n  </status-update-statistics>\r\n  <follow-statistics>\r\n    <count>11</count>\r\n    <employee-count>0</employee-count>\r\n    <non-employee-count>11</non-employee-count>\r\n    <seniorities total=\"11\">\r\n      <seniority>\r\n        <entry-key>4</entry-key>\r\n        <entry-value>5</entry-value>\r\n      </seniority>\r\n      <seniority>\r\n        <entry-key>3</entry-key>\r\n        <entry-value>4</entry-value>\r\n      </seniority>\r\n      <seniority>\r\n        <entry-key>6</entry-key>\r\n        <entry-value>1</entry-value>\r\n      </seniority>\r\n      <seniority>\r\n        <entry-key>0</entry-key>\r\n        <entry-value>0</entry-value>\r\n      </seniority>\r\n\t </seniorities>\r\n    </follow-statistics>\r\n</company-statistics>",
                                                    "schemaContent": "companyStatistics-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "text/xml": {
                                                    "name": "text/xml"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "The Company Statistics API provides the ability to retrieve statistics for a particular company page. These stats can give you insights on both company share and follower metrics. Currently, the numbers provided are not real-time. The analytics breakdown for a company page is provided on a daily basis.",
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/company-statistics",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "company-statistics"
                            ]
                        },
                        {
                            "relativeUri": "/products{fieldSelectors}",
                            "type": {
                                "collection": {
                                    "type": "product"
                                }
                            },
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "uriParameters": {
                                "fieldSelectors": {
                                    "name": "fieldSelectors",
                                    "displayName": "fieldSelectors",
                                    "type": "string",
                                    "required": true,
                                    "repeat": false,
                                    "__METADATA__": {
                                        "calculated": true,
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "methods": [
                                {
                                    "responses": {
                                        "200": {
                                            "code": "200",
                                            "body": {
                                                "application/xml": {
                                                    "name": "application/xml",
                                                    "schema": "products-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<products total=\"32\" count=\"5\" start=\"0\">\r\n  <product>\r\n    <id>1353</id>\r\n    <name>LinkedIn Content Ads</name>\r\n    <type>\r\n      <code>P</code>\r\n      <name>PRODUCT</name>\r\n    </type>\r\n    <num-recommendations>2</num-recommendations>\r\n    <recommendations count=\"2\" start=\"0\">\r\n      <recommendation>\r\n        <recommender>\r\n          <id>G4HI670roP</id>\r\n          <first-name>Jane</first-name>\r\n          <last-name>Doe</last-name>\r\n        </recommender>\r\n        <id>22974</id>\r\n        <product-id>1353</product-id>\r\n        <timestamp>1292234549556</timestamp>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>Fmfl3zkirV</id>\r\n          <first-name>Alex</first-name>\r\n          <last-name>Jones</last-name>\r\n        </recommender>\r\n        <id>3463</id>\r\n        <product-id>1353</product-id>\r\n        <timestamp>1289225062991</timestamp>\r\n      </recommendation>\r\n    </recommendations>\r\n    <product-category>\r\n      <code>INT</code>\r\n      <name>Internet</name>\r\n    </product-category>\r\n    <website-url>http://marketing.linkedinlabs.com/solutions/</website-url>\r\n  </product>\r\n  <product>\r\n    <id>1355</id>\r\n    <name>LinkedIn Polls Sponsorship</name>\r\n    <type>\r\n      <code>P</code>\r\n      <name>PRODUCT</name>\r\n    </type>\r\n    <num-recommendations>2</num-recommendations>\r\n    <recommendations count=\"2\" start=\"0\">\r\n      <recommendation>\r\n        <recommender>\r\n          <id>Rh5L39Whxb</id>\r\n          <first-name>John</first-name>\r\n          <last-name>Smith</last-name>\r\n        </recommender>\r\n        <id>27619</id>\r\n        <product-id>1355</product-id>\r\n        <timestamp>1292992221392</timestamp>\r\n        <text>Great Tool, with Polls Sponsorship our brands will be more dynamic .</text>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>bkVEjNay9w</id>\r\n          <first-name>Ann</first-name>\r\n          <last-name>White</last-name>\r\n        </recommender>\r\n        <id>8867</id>\r\n        <product-id>1355</product-id>\r\n        <timestamp>1289981830700</timestamp>\r\n        <text>It is a good product. I recommend this product. User can post a poll option should be there.</text>\r\n      </recommendation>\r\n    </recommendations>\r\n    <product-category>\r\n      <code>INT</code>\r\n      <name>Internet</name>\r\n    </product-category>\r\n    <website-url>http://www.linkedin.com/opensocialInstallation/preview?_ch_panel_id=1&amp;_applicationId=1900</website-url>\r\n  </product>\r\n  <product>\r\n    <id>1358</id>\r\n    <name>LinkedIn Events Sponsorship</name>\r\n    <type>\r\n      <code>P</code>\r\n      <name>PRODUCT</name>\r\n    </type>\r\n    <num-recommendations>0</num-recommendations>\r\n    <product-category>\r\n      <code>MARKET</code>\r\n      <name>Marketing &amp; Advertising</name>\r\n    </product-category>\r\n    <website-url>http://marketing.linkedin.com/events/</website-url>\r\n  </product>\r\n  <product>\r\n    <id>1436</id>\r\n    <name>LinkedIn</name>\r\n    <type>\r\n      <code>P</code>\r\n      <name>PRODUCT</name>\r\n    </type>\r\n    <num-recommendations>53</num-recommendations>\r\n    <recommendations count=\"3\" start=\"0\">\r\n      <recommendation>\r\n        <recommender>\r\n          <id>ZZfj0hLcmb</id>\r\n          <first-name>Mike</first-name>\r\n          <last-name>Last</last-name>\r\n        </recommender>\r\n        <id>56231</id>\r\n        <product-id>1436</product-id>\r\n        <timestamp>1300369622727</timestamp>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>OcU4BIwnvx</id>\r\n          <first-name>Juan</first-name>\r\n          <last-name>Gomez</last-name>\r\n        </recommender>\r\n        <id>84383</id>\r\n        <product-id>1436</product-id>\r\n        <timestamp>1306340637027</timestamp>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>pfEkdotMmy</id>\r\n          <first-name>Paul</first-name>\r\n          <last-name>Tim</last-name>\r\n        </recommender>\r\n        <id>74292</id>\r\n        <product-id>1436</product-id>\r\n        <timestamp>1304503262773</timestamp>\r\n        <text>this is good one</text>\r\n      </recommendation>\r\n    </recommendations>\r\n    <product-category>\r\n      <code>INT</code>\r\n      <name>Internet</name>\r\n    </product-category>\r\n    <website-url>http://www.linkedin.com</website-url>\r\n  </product>\r\n  <product>\r\n    <id>1437</id>\r\n    <name>LinkedIn Mobile</name>\r\n    <type>\r\n      <code>P</code>\r\n      <name>PRODUCT</name>\r\n    </type>\r\n    <num-recommendations>16</num-recommendations>\r\n    <recommendations count=\"3\" start=\"0\">\r\n      <recommendation>\r\n        <recommender>\r\n          <id>Rh5L39Whxb</id>\r\n          <first-name>Jim</first-name>\r\n          <last-name>Barr</last-name>\r\n        </recommender>\r\n        <id>6444</id>\r\n        <product-id>1437</product-id>\r\n        <timestamp>1289511725870</timestamp>\r\n        <text></text>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>IWZk3OIvZR</id>\r\n          <first-name>Liz</first-name>\r\n          <last-name>Was</last-name>\r\n        </recommender>\r\n        <id>77788</id>\r\n        <product-id>1437</product-id>\r\n        <timestamp>1305153209849</timestamp>\r\n        <text>Great, easy to use app that allows you to build your network on the go as well as post updates and keep in touch. One of the most used apps on my iPhone!</text>\r\n      </recommendation>\r\n      <recommendation>\r\n        <recommender>\r\n          <id>jFYCuJLixi</id>\r\n          <first-name>Al</first-name>\r\n          <last-name>Saiz</last-name>\r\n        </recommender>\r\n        <id>74250</id>\r\n        <product-id>1437</product-id>\r\n        <timestamp>1304497741316</timestamp>\r\n      </recommendation>\r\n    </recommendations>\r\n    <product-category>\r\n      <code>INT</code>\r\n      <name>Internet</name>\r\n    </product-category>\r\n    <website-url>http://www.linkedin.com/static?key=mobile</website-url>\r\n    <disclaimer></disclaimer>\r\n  </product>\r\n</products>",
                                                    "schemaContent": "products-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json"
                                                },
                                                "text/xml": {
                                                    "name": "text/xml"
                                                }
                                            },
                                            "description": "Request succeeded  \n"
                                        },
                                        "400": {
                                            "code": "400",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Your request was not formatted correctly\n"
                                        },
                                        "401": {
                                            "code": "401",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The OAuth signature was bad\n"
                                        },
                                        "403": {
                                            "code": "403",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                        },
                                        "404": {
                                            "code": "404",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                        },
                                        "405": {
                                            "code": "405",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                        },
                                        "500": {
                                            "code": "500",
                                            "body": {
                                                "text/xml": {
                                                    "name": "text/xml",
                                                    "schema": "error-xml",
                                                    "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                                    "schemaContent": "error-xml"
                                                },
                                                "application/json": {
                                                    "name": "application/json",
                                                    "schema": "error-schema",
                                                    "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                                    "schemaContent": "error-schema"
                                                }
                                            },
                                            "description": "There was an application error on the LinkedIn server.\n"
                                        }
                                    },
                                    "protocols": [
                                        "HTTPS"
                                    ],
                                    "securedBy": [
                                        "oauth_2_0",
                                        "oauth_1_0"
                                    ],
                                    "queryParameters": {
                                        "format": {
                                            "name": "format",
                                            "displayName": "format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "headers": {
                                        "x-li-format": {
                                            "name": "x-li-format",
                                            "displayName": "x-li-format",
                                            "type": "string",
                                            "required": false,
                                            "repeat": false,
                                            "description": "Type of data\n",
                                            "enum": [
                                                "xml",
                                                "json",
                                                "jsonp"
                                            ],
                                            "__METADATA__": {
                                                "primitiveValuesMeta": {
                                                    "displayName": {
                                                        "calculated": true
                                                    },
                                                    "type": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "required": {
                                                        "insertedAsDefault": true
                                                    },
                                                    "repeat": {
                                                        "insertedAsDefault": true
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "description": "Use the Company Products API to:\nReturn a list of products and services supported by a company\nReturn recommendations for a particular product\n",
                                    "method": "get",
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "protocols": {
                                                "calculated": true
                                            },
                                            "securedBy": {
                                                "calculated": true
                                            }
                                        }
                                    }
                                }
                            ],
                            "displayName": "/products{fieldSelectors}",
                            "description": "This is base resource type described common request and response headers and error response codes\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "securedBy": {
                                        "calculated": true
                                    },
                                    "displayName": {
                                        "calculated": true
                                    }
                                }
                            },
                            "relativeUriPathSegments": [
                                "products{fieldSelectors}"
                            ]
                        }
                    ],
                    "displayName": "/{companyId}",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "{companyId}"
                    ]
                },
                {
                    "relativeUri": "/universal-name={companyName}",
                    "type": "baseResource",
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "uriParameters": {
                        "companyName": {
                            "name": "companyName",
                            "displayName": "companyName",
                            "type": "string",
                            "required": true,
                            "example": "universal-name=linkedin",
                            "repeat": false,
                            "description": "The unique string identifier for a company.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "methods": [
                        {
                            "responses": {
                                "200": {
                                    "code": "200",
                                    "body": {
                                        "application/xml": {
                                            "name": "application/xml",
                                            "schema": "company-xml",
                                            "example": "<company>\r\n  <id>162479</id>\r\n  <name>Apple</name>\r\n</company>",
                                            "schemaContent": "<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:element name=\"company\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element type=\"xs:int\" name=\"id\"/>\r\n        <xs:element type=\"xs:string\" name=\"name\"/>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"
                                        },
                                        "text/xml": {
                                            "name": "text/xml"
                                        },
                                        "application/json": {
                                            "name": "application/json"
                                        }
                                    },
                                    "description": "Request succeeded  \n"
                                },
                                "400": {
                                    "code": "400",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Your request was not formatted correctly\n"
                                },
                                "401": {
                                    "code": "401",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The OAuth signature was bad\n"
                                },
                                "403": {
                                    "code": "403",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Access to the resource was denied. Usually this means you have reached a throttle limit. Can also mean you do not have permission to access this resource.\n"
                                },
                                "404": {
                                    "code": "404",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "The resource was not found (i.e. you asked for a non-existent user or URL)\n"
                                },
                                "405": {
                                    "code": "405",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "Usually this means you used the wrong HTTP method (GET when you should POST, etc) \n"
                                },
                                "500": {
                                    "code": "500",
                                    "body": {
                                        "text/xml": {
                                            "name": "text/xml",
                                            "schema": "error-xml",
                                            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<error>\n  <status>401</status>\n  <timestamp>1378122242574</timestamp>\n  <request-id>8PQJRYO7JK</request-id>\n  <error-code>0</error-code>\n  <message>Invalid access token.</message>\n</error>",
                                            "schemaContent": "error-xml"
                                        },
                                        "application/json": {
                                            "name": "application/json",
                                            "schema": "error-schema",
                                            "example": "{\n  \"errorCode\": 0,\n  \"message\": \"Invalid access token.\",\n  \"requestId\": \"Y703T8HXBF\",\n  \"status\": 401,\n  \"timestamp\": 1378122137646\n}",
                                            "schemaContent": "error-schema"
                                        }
                                    },
                                    "description": "There was an application error on the LinkedIn server.\n"
                                }
                            },
                            "protocols": [
                                "HTTPS"
                            ],
                            "securedBy": [
                                "oauth_2_0",
                                "oauth_1_0"
                            ],
                            "queryParameters": {
                                "format": {
                                    "name": "format",
                                    "displayName": "format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "headers": {
                                "x-li-format": {
                                    "name": "x-li-format",
                                    "displayName": "x-li-format",
                                    "type": "string",
                                    "required": false,
                                    "repeat": false,
                                    "description": "Type of data\n",
                                    "enum": [
                                        "xml",
                                        "json",
                                        "jsonp"
                                    ],
                                    "__METADATA__": {
                                        "primitiveValuesMeta": {
                                            "displayName": {
                                                "calculated": true
                                            },
                                            "type": {
                                                "insertedAsDefault": true
                                            },
                                            "required": {
                                                "insertedAsDefault": true
                                            },
                                            "repeat": {
                                                "insertedAsDefault": true
                                            }
                                        }
                                    }
                                }
                            },
                            "description": "Returns a single company if found.",
                            "method": "get",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "protocols": {
                                        "calculated": true
                                    },
                                    "securedBy": {
                                        "calculated": true
                                    }
                                }
                            }
                        }
                    ],
                    "displayName": "/universal-name={companyName}",
                    "description": "This is base resource type described common request and response headers and error response codes\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "securedBy": {
                                "calculated": true
                            },
                            "displayName": {
                                "calculated": true
                            }
                        }
                    },
                    "relativeUriPathSegments": [
                        "universal-name={companyName}"
                    ]
                }
            ],
            "displayName": "/companies",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    },
                    "displayName": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "companies"
            ]
        },
        {
            "relativeUri": "/company-search{fieldSelectors}",
            "type": {
                "fieldSelectorMember": {
                    "type": "companySearch"
                }
            },
            "securedBy": [
                "oauth_2_0",
                "oauth_1_0"
            ],
            "uriParameters": {
                "fieldSelectors": {
                    "name": "fieldSelectors",
                    "displayName": "Field Selectors",
                    "type": "string",
                    "required": true,
                    "example": ":(id,first-name,last-name,industry)",
                    "repeat": false,
                    "description": "Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.\nBy indicating exactly the information you need, we can optimize the amount of time needed to return your results.\nIt also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,\na critical factor in any web application, and more so for anyone relying on external APIs.\n\nField selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,\ncontained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding\nyour resource URLs, ensure that the parenthesis used in selectors remain unescaped.\n\nExamples\n--------\nTo get a member's ID, first name, last name, and industry:\n  `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`\n\nOr the same set of information for their connections:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`\n\nFields selectors can also be nested to access individual fields from a larger collection. For example, to get just the\njob titles and not the rest of the information about positions:\n  `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`\n\nField selectors with resource identifiers allow you to request information about multiple entities at once. Specify them\nsimilarly, but append a double colon - here's an example getting profile information about thee members: the first is the\ncurrent member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL\n\n  `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`\n",
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "type": {
                                "insertedAsDefault": true
                            },
                            "required": {
                                "insertedAsDefault": true
                            },
                            "repeat": {
                                "insertedAsDefault": true
                            }
                        }
                    }
                }
            },
            "methods": [
                {
                    "responses": {
                        "200": {
                            "code": "200",
                            "body": {
                                "application/json": {
                                    "name": "application/json"
                                },
                                "application/xml": {
                                    "name": "application/xml",
                                    "schema": "companySearch-xml",
                                    "schemaContent": "companySearch-xml"
                                }
                            }
                        }
                    },
                    "protocols": [
                        "HTTPS"
                    ],
                    "securedBy": [
                        "oauth_2_0",
                        "oauth_1_0"
                    ],
                    "queryParameters": {
                        "hq-only": {
                            "name": "hq-only",
                            "displayName": "hq-only",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Matching companies by the headquarters location. When this is set to \"true\" and a location facet is used, this restricts returned companies to only those whose headquarters resides in the specified location.",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facets": {
                            "name": "facets",
                            "displayName": "facets",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "|Parameter| Definition| Values|\n|---|---|---|\n|location|A geographical region. This is not necessarily a country. It could be a city or regional area, such as San Francisco Bay Area.|A geographical code, such as us:84 for San Francisco Bay Area or fr:0 for France.| \n|industry|An industry field.|Industry codes are listed on a separate page.|\n|network|Collection of companies based on relationship.||\n|company-size|The company collection based on size range specified.|Valid values are: B: 1-10 C: 11-50 D: 51-200 E: 201-500 F: 501-1000 G: 1001-5000 H: 5001-10,000 I: 10,000+|\n|num-followers-range|The company collection based on the number of followers.||\n|fortune|The company collection based on the Fortune ranking.||\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "count": {
                            "name": "count",
                            "displayName": "count",
                            "type": "integer",
                            "required": false,
                            "default": 10,
                            "example": "count=10",
                            "repeat": false,
                            "description": "Maximum",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "start": {
                            "name": "start",
                            "displayName": "start",
                            "type": "string",
                            "required": false,
                            "example": "start=0",
                            "repeat": false,
                            "description": "The offset by which to start Network Update pagination",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "keywords": {
                            "name": "keywords",
                            "displayName": "keywords",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Members who have all the keywords anywhere in their profile. Use this field when you don't know how to\nmore accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "facet": {
                            "name": "facet",
                            "displayName": "facet",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Facet values to search over.\n",
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        },
                        "sort": {
                            "name": "sort",
                            "displayName": "sort",
                            "type": "string",
                            "required": false,
                            "default": "connections",
                            "repeat": false,
                            "description": "\"Controls the search result order. There are four options:\nconnections: Number of connections per person, from largest to smallest.\nrecommenders: Number of recommendations per person, from largest to smallest.\ndistance: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together, including third degree and out-of-network.\nrelevance: Relevance of results based on the query, from most to least relevant.          \nBy default, results are ordered by the number of connections.\"\n",
                            "enum": [
                                "connections",
                                "recommenders",
                                "distance",
                                "relevance"
                            ],
                            "__METADATA__": {
                                "primitiveValuesMeta": {
                                    "displayName": {
                                        "calculated": true
                                    },
                                    "type": {
                                        "insertedAsDefault": true
                                    },
                                    "required": {
                                        "insertedAsDefault": true
                                    },
                                    "repeat": {
                                        "insertedAsDefault": true
                                    }
                                }
                            }
                        }
                    },
                    "description": "Use the Company Search API to find companies using keywords, industry, location, or some other criteria. It returns a collection of matching companies. Each entry can contain much of the information available on the company page.\nThe API can also return facets. Facets provide you with data about the collection of companies, such as which companies are located in a certain area, size of the companies, and the industry a company is in. You can then use this data to make a new API call that further refines your original request. This is similar to clicking the buttons on the left-hand side of the LinkedIn Search results page.\n",
                    "method": "get",
                    "is": [
                        "paged",
                        "filterable"
                    ],
                    "__METADATA__": {
                        "primitiveValuesMeta": {
                            "protocols": {
                                "calculated": true
                            },
                            "securedBy": {
                                "calculated": true
                            }
                        }
                    }
                }
            ],
            "displayName": "/company-search{fieldSelectors}",
            "description": "Describes field selectors uri path parameter\n",
            "__METADATA__": {
                "primitiveValuesMeta": {
                    "securedBy": {
                        "calculated": true
                    },
                    "displayName": {
                        "calculated": true
                    }
                }
            },
            "relativeUriPathSegments": [
                "company-search{fieldSelectors}"
            ]
        }
    ],
    "documentation": [
        {
            "title": "Headline",
            "content": "LinkedIn is a business-oriented social networking service."
        }
    ],
    "__METADATA__": {
        "primitiveValuesMeta": {
            "protocols": {
                "calculated": true
            }
        }
    }
}