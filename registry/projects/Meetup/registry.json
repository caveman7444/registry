{"apis": {"RAMLFiles": [
    {
        "name": "Meetup",
        "description": "descriptionexamle",
        "RAMLVersion": "0.8",
        "location": "https://raw.githubusercontent.com/raml-apis/Meetup/master/meetup.raml",
        "raml-1-parser_result": "https://raw.githubusercontent.com/caveman7444/registry/master/registry/projects/Meetup/master/meetup.json",
        "baseUri": "https://api.meetup.com/",
        "version": "v3",
        "securitySchemes": [
            {"oauth_2_0": {
                "name": "oauth_2_0",
                "type": "OAuth 2.0",
                "description": "#OAuth 2 Requests over HTTPS\nThe Meetup API implements rfc6749, the superseding specification for OAuth 1, OAuth 2. This protocol requires all communication with the Meetup servers to use HTTPS. If your application does not, you will receive an error.\n\nWe provide implementations of both the server and implicit protocol flows. We provide the following endpoints for both where necessary.\n\nAuthorization https://secure.meetup.com/oauth2/authorize\nAccess Tokens https://secure.meetup.com/oauth2/access\nBefore you can use OAuth 2 for user authorization, you need to either register a new OAuth consumer or add a redirect_uri to your existing consumer by clicking the edit link next to you consumer's listing. The redirect_uri you register for a given client will be used to validate future oauth2 requests. Any redirect_uri parameter that starts with the registered uri will be considered valid. For instance if you register the uri http://foo.com, http://foo.com/authed will be considered valid while http://bar.foo.com will not.\n\nOAuth 2 consumers are also valid OAuth 1.0a consumers.\n",
                "describedBy": {
                    "responses": {
                        "401": {
                            "code": "401",
                            "description": "Bad or expired token. This can happen if the user or Dropbox\nrevoked or expired an access token. To fix, you should re-\nauthenticate the user.\n"
                        },
                        "403": {
                            "code": "403",
                            "description": "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
                        }
                    },
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {"access_token": {
                        "name": "access_token",
                        "displayName": "access_token",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Used to send a valid OAuth 2 access token. Do not use together with\nthe \"Authorization\" header\n",
                        "__METADATA__": {"primitiveValuesMeta": {
                            "displayName": {"calculated": true},
                            "type": {"insertedAsDefault": true},
                            "required": {"insertedAsDefault": true},
                            "repeat": {"insertedAsDefault": true}
                        }}
                    }},
                    "headers": {"Authorization": {
                        "name": "Authorization",
                        "displayName": "Authorization",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Used to send a valid OAuth 2 access token. Do not use\nwith the \"access_token\" query string parameter.\n",
                        "__METADATA__": {"primitiveValuesMeta": {
                            "displayName": {"calculated": true},
                            "type": {"insertedAsDefault": true},
                            "required": {"insertedAsDefault": true},
                            "repeat": {"insertedAsDefault": true}
                        }}
                    }},
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                },
                "settings": {
                    "accessTokenUri": "https://secure.meetup.com/oauth2/access",
                    "authorizationUri": "https://secure.meetup.com/oauth2/authorize",
                    "authorizationGrants": ["code"]
                }
            }},
            {"oauth_1_0": {
                "name": "oauth_1_0",
                "type": "OAuth 1.0",
                "description": "OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.\n\n#OAuth 1.0a Signed Requests\nThe Meetup API supports authentication of third-party applications using the OAuth protocol. This allows your application to access a user's data and RSVP to events on behalf of the user (after they have explicitly granted permission). If you would like to set up an OAuth consumer to use for your application, you can create one here. The procedure to making requests with OAuth is as follows:\n\nFetch a request token, by using the request token URL: https://api.meetup.com/oauth/request/ signed with your consumer credentials. You must include an oauth_callback parameter. Set it to URL that the user will be redirected to after authorizing the application, or oob for out-of-band authentication. The response will include a key and secret for a request token.\nRedirect the user to the authorization url:\nhttp://www.meetup.com/authorize/?oauth_token=request_token_key.\nAfter authorizing, the user is redirected to your callback url with the oauth_token and an oauth_verifier parameter that your application will need acquire an access token. For out-of-band authorization, the verifier is displayed as a \"pin\" for the user to enter into your application.\nFetch an access token using the access token URL: https://api.meetup.com/oauth/access/. If the user has chosen to allow the application and a correct oauth_verifier parameter is supplied, the request will return an access token key and secret which can be used for subsequent requests.\nMake API calls as normal - but with the necessary OAuth parameters or headers added to the request. Meetup users can see a list of applications they've authorized in their account settings page, and choose to remove an application. After a user chooses to remove an application, the access token will expire and any requests made with the token will fail. The user will need to re-authorize the application in order to allow access to continue with a new token.\nSignatures are used to ensure the identity of the consumer application. Currently, the Meetup implementation of OAuth supports plaintext and HMAC_SHA1 as signature methods. For the URL portion of the signature base string, use the following values:\n\nRequest Tokens: https://api.meetup.com/oauth/request/\nAccess Tokens: https://api.meetup.com/oauth/access/\nProtected Resources (API calls): http://api.meetup.com/\nFor complete details on how to form signatures for OAuth requests, refer to the OAuth specification details.\n\n#OAuth Authentication\nEndpoint: http://www.meetup.com/authenticate/?oauth_token=request_token_key\n\nIn addition to the standard OAuth 1.0a authorization flow, we support an authentication endpoint for sites that wish to use Meetup to sign in users. Under certain conditions this endpoint will immediately redirect back to the callback URL:\n\nThe user is already logged in to Meetup, and\nThe user has already authorized your application and that authorization has not been revoked, and\nThe provided request token is valid\nWhen these conditions are not satisfied the authentication endpoint behaves the same as the authorization endpoint, sending the user to the sign in or authorization page as appropriate.\n\n#API Request Signing\nOAuth requests must also satisfy the following requirements:\n\nInclude a timestamp (oauth_timestamp) which must match to within a 5 minute window of the server time, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\nInclude a nonce (oauth_nonce) which is a unique, randomly generated number that is specific to this request.\nInclude the consumer key (oauth_consumer_key) which is used to identify the application making the request.\nInclude the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\nIf any of these components are missing or invalid, the OAuth request will be rejected with an error. The tedious part of assembling these parameters is easily addressed by using one of the open source OAuth clients or the Meetup Python client, which has bundled support for OAuth requests.\n\nYou should store access tokens (key and secret) so that they can be re-used without forcing the user to authorize a new token every time. Initialize MeetupOAuth with an access_key and access_secret if you want an API client specific to a given user, which eliminates the need to specify a sess with each API call. The app.py script included with the python-api-client implements a basic command-line driven OAuth flow with token persistence and client-user binding.\n",
                "describedBy": {
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {
                        "oauth_timestamp": {
                            "name": "oauth_timestamp",
                            "displayName": "oauth_timestamp",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include a timestamp (oauth_timestamp) which must match to within a 5 minute window of the server time, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_nonce": {
                            "name": "oauth_nonce",
                            "displayName": "oauth_nonce",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include a nonce (oauth_nonce) which is a unique, randomly generated number that is specific to this request.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_consumer_key": {
                            "name": "oauth_consumer_key",
                            "displayName": "oauth_consumer_key",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the consumer key (oauth_consumer_key) which is used to identify the application making the request.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_signature_method": {
                            "name": "oauth_signature_method",
                            "displayName": "oauth_signature_method",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_signature": {
                            "name": "oauth_signature",
                            "displayName": "oauth_signature",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        }
                    },
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                },
                "settings": {
                    "requestTokenUri": "https://api.meetup.com/oauth/request/",
                    "authorizationUri": "http://www.meetup.com/authorize/",
                    "tokenCredentialsUri": "https://api.meetup.com/oauth/access/"
                }
            }},
            {"api_key": {
                "name": "api_key",
                "type": "x-API-Key-Signatures",
                "description": "#API Key signatures\nSimilar to OAuth signing, this method of authentication certifies that a request was approved by a particular user. Unlike OAuth-signed requests, key-signed requests may be reused and recycled as long as their corresponding API key is valid. If a signed URL is released to the public, any application can use it to interact with Meetup as if it had that API key; the difference is that it can not change definitive parameters or use the signature against other API methods.\n\nBecause requests are signed with an API key as well as a Meetup private key, it is not possible for applications to sign them independently. Instead they pass a \"sign=true\" parameter along with a standard read request authorized by an API key. This causes a \"signed_url\" field to be returned in the response metadata. OAuth requests may not be signed with an API key, as this would allow a consumer to continue act on behalf of a user even if its access token is revoked.\n\nURL: any read method\nFormats: json, xml\nParameters: all of the required parameters for the standard request must be supplied, as well as the following:\n\nsign Set to \"true\"\nkey API key authentication is required.\n#Variable Parameters:\nCertain parameters are excluded from the URL signature calculation so that they may be updated to recycle the request.\n\noffset Paging through long responses.\nformat Change the response format to xml or json.\ncallback Specify a JavaScript callback to handle the results.\n\n#Response Data\nAlong with the normal results and metadata, a \"signed_url\" is returned that can be used to repeat the request. In JSON it is in the \"meta\" object, in XML the \"head\" element.\n\nsigned_url Full signed url, may include default values for parameters not specified in the original request. Parameters may be reordered when reusing but only the value of the \"variable parameters\" may be altered.\n\n#Examples:\nGet the upcoming NY Tech Meetups.\n\nhttps://api.meetup.com/events.json?key=ABDE12456AB2324445&group_urlname=ny-tech&sign=true\nThe returned \"signed_url\" field to be published and reused.\n\nhttp://api.meetup.com/events/?radius=25.0&order=time&group_urlname=ny-tech&offset=0&format=json&page=20&sig_id=123456780&sig=xxxxxx\n",
                "describedBy": {
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {
                        "key": {
                            "name": "key",
                            "displayName": "key",
                            "type": "string",
                            "required": true,
                            "example": "ABDE12456AB2324445",
                            "repeat": false,
                            "description": "Your unique API key",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "sign": {
                            "name": "sign",
                            "displayName": "sign",
                            "type": "string",
                            "required": true,
                            "example": "true",
                            "repeat": false,
                            "description": "Should have the 'true' value.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        }
                    },
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                }
            }}
        ],
        "resourcesCount": 95,
        "methodsCount": 114
    },
    {
        "name": "Meetup",
        "description": "descriptionexamle",
        "RAMLVersion": "0.8",
        "location": "https://raw.githubusercontent.com/raml-apis/Meetup/staging/meetup.raml",
        "raml-1-parser_result": "https://raw.githubusercontent.com/caveman7444/registry/master/registry/projects/Meetup/staging/meetup.json",
        "baseUri": "https://api.meetup.com/",
        "version": "v3",
        "securitySchemes": [
            {"oauth_2_0": {
                "name": "oauth_2_0",
                "type": "OAuth 2.0",
                "description": "#OAuth 2 Requests over HTTPS\nThe Meetup API implements rfc6749, the superseding specification for OAuth 1, OAuth 2. This protocol requires all communication with the Meetup servers to use HTTPS. If your application does not, you will receive an error.\n\nWe provide implementations of both the server and implicit protocol flows. We provide the following endpoints for both where necessary.\n\nAuthorization https://secure.meetup.com/oauth2/authorize\nAccess Tokens https://secure.meetup.com/oauth2/access\nBefore you can use OAuth 2 for user authorization, you need to either register a new OAuth consumer or add a redirect_uri to your existing consumer by clicking the edit link next to you consumer's listing. The redirect_uri you register for a given client will be used to validate future oauth2 requests. Any redirect_uri parameter that starts with the registered uri will be considered valid. For instance if you register the uri http://foo.com, http://foo.com/authed will be considered valid while http://bar.foo.com will not.\n\nOAuth 2 consumers are also valid OAuth 1.0a consumers.\n",
                "describedBy": {
                    "responses": {
                        "401": {
                            "code": "401",
                            "description": "Bad or expired token. This can happen if the user or Dropbox\nrevoked or expired an access token. To fix, you should re-\nauthenticate the user.\n"
                        },
                        "403": {
                            "code": "403",
                            "description": "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
                        }
                    },
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {"access_token": {
                        "name": "access_token",
                        "displayName": "access_token",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Used to send a valid OAuth 2 access token. Do not use together with\nthe \"Authorization\" header\n",
                        "__METADATA__": {"primitiveValuesMeta": {
                            "displayName": {"calculated": true},
                            "type": {"insertedAsDefault": true},
                            "required": {"insertedAsDefault": true},
                            "repeat": {"insertedAsDefault": true}
                        }}
                    }},
                    "headers": {"Authorization": {
                        "name": "Authorization",
                        "displayName": "Authorization",
                        "type": "string",
                        "required": false,
                        "repeat": false,
                        "description": "Used to send a valid OAuth 2 access token. Do not use\nwith the \"access_token\" query string parameter.\n",
                        "__METADATA__": {"primitiveValuesMeta": {
                            "displayName": {"calculated": true},
                            "type": {"insertedAsDefault": true},
                            "required": {"insertedAsDefault": true},
                            "repeat": {"insertedAsDefault": true}
                        }}
                    }},
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                },
                "settings": {
                    "accessTokenUri": "https://secure.meetup.com/oauth2/access",
                    "authorizationUri": "https://secure.meetup.com/oauth2/authorize",
                    "authorizationGrants": ["code"]
                }
            }},
            {"oauth_1_0": {
                "name": "oauth_1_0",
                "type": "OAuth 1.0",
                "description": "OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.\n\n#OAuth 1.0a Signed Requests\nThe Meetup API supports authentication of third-party applications using the OAuth protocol. This allows your application to access a user's data and RSVP to events on behalf of the user (after they have explicitly granted permission). If you would like to set up an OAuth consumer to use for your application, you can create one here. The procedure to making requests with OAuth is as follows:\n\nFetch a request token, by using the request token URL: https://api.meetup.com/oauth/request/ signed with your consumer credentials. You must include an oauth_callback parameter. Set it to URL that the user will be redirected to after authorizing the application, or oob for out-of-band authentication. The response will include a key and secret for a request token.\nRedirect the user to the authorization url:\nhttp://www.meetup.com/authorize/?oauth_token=request_token_key.\nAfter authorizing, the user is redirected to your callback url with the oauth_token and an oauth_verifier parameter that your application will need acquire an access token. For out-of-band authorization, the verifier is displayed as a \"pin\" for the user to enter into your application.\nFetch an access token using the access token URL: https://api.meetup.com/oauth/access/. If the user has chosen to allow the application and a correct oauth_verifier parameter is supplied, the request will return an access token key and secret which can be used for subsequent requests.\nMake API calls as normal - but with the necessary OAuth parameters or headers added to the request. Meetup users can see a list of applications they've authorized in their account settings page, and choose to remove an application. After a user chooses to remove an application, the access token will expire and any requests made with the token will fail. The user will need to re-authorize the application in order to allow access to continue with a new token.\nSignatures are used to ensure the identity of the consumer application. Currently, the Meetup implementation of OAuth supports plaintext and HMAC_SHA1 as signature methods. For the URL portion of the signature base string, use the following values:\n\nRequest Tokens: https://api.meetup.com/oauth/request/\nAccess Tokens: https://api.meetup.com/oauth/access/\nProtected Resources (API calls): http://api.meetup.com/\nFor complete details on how to form signatures for OAuth requests, refer to the OAuth specification details.\n\n#OAuth Authentication\nEndpoint: http://www.meetup.com/authenticate/?oauth_token=request_token_key\n\nIn addition to the standard OAuth 1.0a authorization flow, we support an authentication endpoint for sites that wish to use Meetup to sign in users. Under certain conditions this endpoint will immediately redirect back to the callback URL:\n\nThe user is already logged in to Meetup, and\nThe user has already authorized your application and that authorization has not been revoked, and\nThe provided request token is valid\nWhen these conditions are not satisfied the authentication endpoint behaves the same as the authorization endpoint, sending the user to the sign in or authorization page as appropriate.\n\n#API Request Signing\nOAuth requests must also satisfy the following requirements:\n\nInclude a timestamp (oauth_timestamp) which must match to within a 5 minute window of the server time, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\nInclude a nonce (oauth_nonce) which is a unique, randomly generated number that is specific to this request.\nInclude the consumer key (oauth_consumer_key) which is used to identify the application making the request.\nInclude the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\nIf any of these components are missing or invalid, the OAuth request will be rejected with an error. The tedious part of assembling these parameters is easily addressed by using one of the open source OAuth clients or the Meetup Python client, which has bundled support for OAuth requests.\n\nYou should store access tokens (key and secret) so that they can be re-used without forcing the user to authorize a new token every time. Initialize MeetupOAuth with an access_key and access_secret if you want an API client specific to a given user, which eliminates the need to specify a sess with each API call. The app.py script included with the python-api-client implements a basic command-line driven OAuth flow with token persistence and client-user binding.\n",
                "describedBy": {
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {
                        "oauth_timestamp": {
                            "name": "oauth_timestamp",
                            "displayName": "oauth_timestamp",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include a timestamp (oauth_timestamp) which must match to within a 5 minute window of the server time, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_nonce": {
                            "name": "oauth_nonce",
                            "displayName": "oauth_nonce",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include a nonce (oauth_nonce) which is a unique, randomly generated number that is specific to this request.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_consumer_key": {
                            "name": "oauth_consumer_key",
                            "displayName": "oauth_consumer_key",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the consumer key (oauth_consumer_key) which is used to identify the application making the request.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_signature_method": {
                            "name": "oauth_signature_method",
                            "displayName": "oauth_signature_method",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "oauth_signature": {
                            "name": "oauth_signature",
                            "displayName": "oauth_signature",
                            "type": "string",
                            "required": false,
                            "repeat": false,
                            "description": "Include the signature method (oauth_signature_method) and signature (oauth_signature) which are cryptographically generated digests of the resource URL, the parameters, the consumer secret, and the nonce + timestamp values.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "required": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        }
                    },
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                },
                "settings": {
                    "requestTokenUri": "https://api.meetup.com/oauth/request/",
                    "authorizationUri": "http://www.meetup.com/authorize/",
                    "tokenCredentialsUri": "https://api.meetup.com/oauth/access/"
                }
            }},
            {"api_key": {
                "name": "api_key",
                "type": "x-API-Key-Signatures",
                "description": "#API Key signatures\nSimilar to OAuth signing, this method of authentication certifies that a request was approved by a particular user. Unlike OAuth-signed requests, key-signed requests may be reused and recycled as long as their corresponding API key is valid. If a signed URL is released to the public, any application can use it to interact with Meetup as if it had that API key; the difference is that it can not change definitive parameters or use the signature against other API methods.\n\nBecause requests are signed with an API key as well as a Meetup private key, it is not possible for applications to sign them independently. Instead they pass a \"sign=true\" parameter along with a standard read request authorized by an API key. This causes a \"signed_url\" field to be returned in the response metadata. OAuth requests may not be signed with an API key, as this would allow a consumer to continue act on behalf of a user even if its access token is revoked.\n\nURL: any read method\nFormats: json, xml\nParameters: all of the required parameters for the standard request must be supplied, as well as the following:\n\nsign Set to \"true\"\nkey API key authentication is required.\n#Variable Parameters:\nCertain parameters are excluded from the URL signature calculation so that they may be updated to recycle the request.\n\noffset Paging through long responses.\nformat Change the response format to xml or json.\ncallback Specify a JavaScript callback to handle the results.\n\n#Response Data\nAlong with the normal results and metadata, a \"signed_url\" is returned that can be used to repeat the request. In JSON it is in the \"meta\" object, in XML the \"head\" element.\n\nsigned_url Full signed url, may include default values for parameters not specified in the original request. Parameters may be reordered when reusing but only the value of the \"variable parameters\" may be altered.\n\n#Examples:\nGet the upcoming NY Tech Meetups.\n\nhttps://api.meetup.com/events.json?key=ABDE12456AB2324445&group_urlname=ny-tech&sign=true\nThe returned \"signed_url\" field to be published and reused.\n\nhttp://api.meetup.com/events/?radius=25.0&order=time&group_urlname=ny-tech&offset=0&format=json&page=20&sig_id=123456780&sig=xxxxxx\n",
                "describedBy": {
                    "securedBy": ["oauth_2_0"],
                    "queryParameters": {
                        "key": {
                            "name": "key",
                            "displayName": "key",
                            "type": "string",
                            "required": true,
                            "example": "ABDE12456AB2324445",
                            "repeat": false,
                            "description": "Your unique API key",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        },
                        "sign": {
                            "name": "sign",
                            "displayName": "sign",
                            "type": "string",
                            "required": true,
                            "example": "true",
                            "repeat": false,
                            "description": "Should have the 'true' value.\n",
                            "__METADATA__": {"primitiveValuesMeta": {
                                "displayName": {"calculated": true},
                                "type": {"insertedAsDefault": true},
                                "repeat": {"insertedAsDefault": true}
                            }}
                        }
                    },
                    "__METADATA__": {"primitiveValuesMeta": {"securedBy": {"calculated": true}}}
                }
            }}
        ],
        "resourcesCount": 95,
        "methodsCount": 114
    }
]}}